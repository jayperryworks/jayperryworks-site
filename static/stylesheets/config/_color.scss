//  Global color
// -> refer to colors ONLY via the $theme maps
@use 'bourbon';
@use 'helpers';

// --- Base Palette ---

// neutrals
$_black: #333;
$_gray: #b1b1b1;

// highlights
$_lavendar: #7999ec;

// --- Color roles ---

// highlight default
// -> this is not included in the $themes map because this color is the same regardless of theme.
$highlight: $_lavendar;

$themes: (
  'reverse': (
    'primary': #fff,
    'secondary': bourbon.tint($_gray, 20),
    'tertiary': bourbon.tint($_black, 35),
    'bg': $_black,
    'island': bourbon.tint($_black, 8),
    'well': bourbon.shade($_black, 20),
    'border': bourbon.tint($_black, 20),
    'shadow': rgba(bourbon.shade($_black, 60), 0.4)
  ),
  'default': (
    'primary': #444,
    'secondary': #555,
    'tertiary': $_gray,
    'bg': #fff,
    'island': #fff,
    'well': bourbon.tint($_gray, 85),
    'border': bourbon.tint($_gray, 40),
    'shadow': rgba($_gray, 0.2)
  )
);

$shade-value: 10; // percentage to lighten or darken the color for '-light' or '-dark' custom properties

// --- Helpers & mixins ---

// getter function to access color map values
// -> PARAMS
//    - STRING/LIST $colors: the name(s) of the color roles, e.g. 'highlight'
//    - STRING $name (optional): the name of the theme, e.g. 'default', 'dark'
//    - NUMBER $grade (optional): 'grade' (as in 'gradation') the color to be darker or lighter
//      -> pass in a negative number to darken the color
//      -> pass in a positive number to lighten the color
// -> PUBLIC
// -> USAGE:
//    - color: color.get('primary');
//    - color: color.get('highlight' 'primary', 'reverse');
@function get(
  $color,
  $theme-name: 'default',
  $grade: 0,
  $opacity: 1
) {
  $value: null;

  @if $color == 'highlight' {
    $value: $_lavendar;
  } @else {
    // first extract the 'theme' nested map
    $theme: map-get($themes, $theme-name);

    // grab the color value from the $themes map
    $value: map-get($theme, $color);
  }

  // lighten or darken the color
  @if ($grade < 0) {
    $value: bourbon.shade($value, abs($grade));
  }

  @if ($grade > 0) {
    $value: bourbon.tint($value, abs($grade));
  }

  @if ($opacity < 1) {
    $value: rgba($value, $opacity);
  }

  @return $value;
}

// create the string for color custom properties used in color() and theme() mixins below
// --color-text-primary[-light]
// -> PUBLIC
@function custom-prop($color, $shade: 'none') {
  @return --color-#{$color}#{if($shade != 'none', -#{$shade}, '')}
}

// create default and custom property versions of a color
// -> PUBLIC
// -> USAGE
//    - @include color.add(background-color, highlight, dark);
@mixin add(
  $prop,
  $color,
  $shade: 'none',
  $theme: 'default',
  $important: false
) {

  $shades: (
    'light': $shade-value,
    'dark': ($shade-value * -1),
    'none': 0
  );

  #{$prop}: helpers.important(
      get($color, $theme, $grade: map-get($shades, $shade)
    ), $important);
  #{$prop}: helpers.important(
      var(custom-prop($color, $shade)
    ), $important);
}

// decorator to set color ('foreground') property
@mixin add-fg($color, $props...) {
  @include add(color, $color, $props...);
}

// decorator to set background-color property
@mixin add-bg($color, $props...) {
  @include add(background-color, $color, $props...);
}

// set up custom properties with the right values for a theme container
// -> PUBLIC
// -> USAGE
//    - body { @include theme('default'); }
@mixin theme($theme, $include-props: false) {

  // create a list of custom properties for each color role in a theme
  // -> e.g. --color-text-primary
  $theme-colors: map-get($themes, $theme);

  @each $name, $color in $theme-colors {
    #{custom-prop($name, 'light')}: #{bourbon.tint($color, $shade-value)};
    #{custom-prop($name)}: #{$color};
    #{custom-prop($name, 'dark')}: #{bourbon.shade($color, $shade-value)};
  }
}
