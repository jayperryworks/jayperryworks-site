---
// assets
import '@styles/base/reset.css';
import '@styles/base/type.css';
import '@styles/tokens/borders.css';
import '@styles/tokens/color.css';

// components
import MainNav from '@components/navigation/MainNav.astro';
import MainFooter from '@components/navigation/MainFooter.astro';

// types
import type {
	ColorRoles,
	CSSVariable,
	HexColor,
	HSLColor,
	Theme,
} from '@lib/types';

export interface Props {
	pageTitle?: string;
	path?: string;
	headerOverlay?: boolean;
	theme?: Partial<Theme>;
};

export type ThemeTokens = Partial<Record<`color-${ColorRoles}`, HexColor | HSLColor | CSSVariable>>;

// props and data
const {
	pageTitle,
	headerOverlay = false,
	path = 'home',
	theme,
} = Astro.props as Props;

const SITE_TITLE = 'Jay Perry';
const title = pageTitle ? `${SITE_TITLE} | ${pageTitle}` : SITE_TITLE;

// if a theme has been passed in, replace the default color tokens with the theme values
function themeReducer(
	result: ThemeTokens,
	role: ColorRoles
): ThemeTokens {
	if (theme[role]) result[`color-${role}`] = theme[role];
	return result;
}

const themeTokens: ThemeTokens = theme ? Object.keys(theme).reduce(themeReducer, {}) : null;
---

<html lang="en" class="no-js no-touch">
	<head>
		<meta charset='utf-8'>
		<meta name='viewport' content='width=device-width,initial-scale=1.0'>
		<title>{title}</title>
		<script>
			// Add a class to the html element to confirm JS is available
			// -> used by the CSS for styling JS-dependent elements
			let featureClasses = ['js'];
			// Add a class if the browser/device supports touch
			if ("ontouchstart" in document.documentElement) featureClasses.push('touch');
			document.documentElement.className = featureClasses.join(' ');
		</script>
	</head>

	<body>
		<MainNav segment={path} overlay={headerOverlay} />
		<main>
			<slot />
		</main>
		<MainFooter class="footer" />
	</body>
</html>

<!-- set the page theme as root custom properties to override the default tokens -->
<style define:vars={themeTokens} is:global></style>

<style>
	body {
		--spine-color: var(--color-highlight);

		background-color: var(--color-bg);
		border-left: var(--border-spine-width) solid var(--spine-color);
		color: var(--color-primary);
		display: grid;
		grid-template-rows: auto 1fr auto;
		min-height: 100vh;
		position: relative;
		transition: border-left-color 0.25s ease;
		will-change: border-left-color;
	}
</style>
