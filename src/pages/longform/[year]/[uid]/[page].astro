---
// assets
import '@styles/tokens/contentWidth.css';
import '@styles/tokens/spacing.css';

// utilities
import { format } from 'date-fns';
import * as prismicHelpers from '@prismicio/helpers';
import prismic from '@lib/prismic';

// components
import Layout from '@layouts/Layout.astro';
import BlockList from '@components/BlockList.astro';
import Callout from '@components/elements/Callout.astro';
import Heading from '@components/blocks/Heading.astro';
import MainFooter from '@components/navigation/MainFooter.astro';
import MainNav from '@components/navigation/MainNav.astro';
import ReadNextLink from '@components/navigation/ReadNextLink.astro';
import SequenceNav from '@components/navigation/SequenceNav.astro';
import SequenceNavItem from '@components/navigation/SequenceNavItem.astro';
import ProgressBar from '@components/elements/ProgressBar.astro';

// types
import type {
	Align,
} from '@lib/types';

import type { Props as SequenceNavItemProps } from '@components/navigation/SequenceNavItem.astro';
import type { Action as CalloutAction } from '@components/elements/Callout.astro';
import type { RichTextField, TitleField } from '@prismicio/types';

export interface SequenceNavItemData extends SequenceNavItemProps {
	title: TitleField;
}

type Callout = {
	title: TitleField,
	description: RichTextField,
	actions?: CalloutAction[],
}

// Using 'nested pagination' to generate 'chapter' pages for each longform project
// -> https://docs.astro.build/en/core-concepts/routing/#nested-pagination
export async function getStaticPaths({ paginate }) {
	// query all longform projects
	// -> use graphQuery to fetch linked Chapter data for each project
	const projectsResponse = await prismic.getAllByType('longform', {
		orderings: {
			field: 'my.longform.date',
			direction: 'desc',
		},
		graphQuery: `
			{
				longform {
					...longformFields
					chapters {
						chapter {
							...on longform_chapter {
								...longform_chapterFields
							}
						}
					}
				}
			}
		`,
	});


	// loop over each project and create a massaged list of chapters to be paginated
	return projectsResponse.flatMap(({ uid, data }) => {
		const year = format(prismicHelpers.asDate(data.date), 'yyyy');

		const callouts = data.body.map(({ primary, items }) => ({
			title: primary.heading,
			description: { prismicText: primary.description },
			placement: primary.placement.toLowerCase(),
			actions: items?.length > 0
				? items.map(({ call_to_action_label: label, link }) => ({ label, link, }))
				: undefined,
		}));

		const chapters = data.chapters.map(({ chapter }) => {
			const {
				title,
				subtitle,
				preset_theme,
				base_hue,
				// deprecated color data - remove
				highlight_color: highlight,
				primary_foreground_color: primary,
				secondary_foreground_color: secondary,
				background_color: surface,
				body,
				body1: colorThemes,
			} = chapter.data;

			return {
				uid,
				title,
				subtitle,
				body,
				callouts,
				project: {
					uid,
					title: data.title,
					subtitle: data.subtitle,
					chapterLabel: data.chapter_label,
					chapterList: data.chapters.map(({ chapter }) => chapter.data.title),
					status: data.status,
				},
				seo: {
					description: data.seo_description,
					image: data.seo_image?.url,
					imageAlt: data.seo_image?.alt,
					title: data.seo_title,
				},
				theme: {
					name: preset_theme,
					hue: base_hue,
					custom: colorThemes,
				},
			};
		});

		// one chapter per page under the given project params
		const pages = paginate(chapters, {
			pageSize: 1,
			params: { year, uid },
		});

		return pages;
	});
}

const {
	year,
	uid,
} = Astro.params;

const {
	url,
	data,
	currentPage,
	lastPage,
} = Astro.props.page;

const {
	body,
	project,
	seo,
	subtitle,
	theme,
	title,
	callouts,
} = data[0];

// if no title was given for SEO content, make a default one using the page data above
// -> locating it down here instead of in the pagination function above because currentPage is accessible from here
if (!seo.title) seo.title = `${prismicHelpers.asText(project.title)}, Part ${currentPage}: ${prismicHelpers.asText(title)}`;

// sequence nav
function sequenceNavItemAlign(index: number): Align {
	if (index === 0) return 'start';
	if (index === lastPage - 1) return 'end';
	return 'center';
}

// list of chapter links for the SequenceNav at the top and bottom of the page
const sequenceNavItems = project.chapterList.map(
	(title: TitleField, index: number): SequenceNavItemData => ({
		title,
		href: `/longform/${year}/${uid}/${index + 1}`,
		complete: currentPage > index + 1,
		current: currentPage === index + 1,
		tooltipAlign: sequenceNavItemAlign(index),
	})
);

// pagination nav
const nextChapter = project.chapterList[currentPage] ? {
	title: project.chapterList[currentPage],
	number: currentPage + 1,
	href: url.next,
} : null;

// callouts
const topCallouts = callouts.filter(({ placement }) => {
	if (currentPage === 0) return (placement === 'top' || placement === 'start');
	return placement === 'top';
});

const bottomCallouts = callouts.filter(({ placement }) => {
	if (currentPage === lastPage) return (placement === 'bottom' || placement === 'end');
	return placement === 'bottom';
});
---

<Layout
	pageTitle={prismicHelpers.asText(project.title)}
	{theme}
	{seo}
>
	<MainNav segment={uid} />
	<main>
		<article class="chapter">
			<!-- titling -->
			<header class="headline">
					<!-- project title -->
					<Heading level={1} text={project.title} />
					{prismicHelpers.isFilled.title(project.subtitle) && (
						<Heading
							level={2}
							text={project.subtitle}
							subheading
						/>
					)}

					<!-- sequence nav -->
					{sequenceNavItems.length > 1 && (
						<!-- progress bar (for small screens) -->
						<ProgressBar
							class="progress"
							value={currentPage}
							range={sequenceNavItems.length}
						>
							Progress: You are currently reading Chapter {currentPage} of {sequenceNavItems.length}.
						</ProgressBar>

						<!-- for larger screens -->
						<div class={[
							'sequence',
							// if the sequence nav has a lot of items, make it wider
							sequenceNavItems.length <= 6 ? 'wrapper' : 'wrapper wide'
						].join(' ')}>
							<SequenceNav>
								{sequenceNavItems.map((item) => (
									<SequenceNavItem {...item}>{prismicHelpers.asText(item.title)}</SequenceNavItem>
								))}
							</SequenceNav>
						</div>
					)}

					<!-- chapter title -->
					<div class="headline-chapter">
						<Heading level={3} subheading>{`${project.chapterLabel} ${currentPage}`}</Heading>
						<Heading level={2} class="header-chapter" text={title} />
						{subtitle && <Heading level={3} subheading text={subtitle} />}
					</div>
			</header>

			<!-- Top callouts -->
			{topCallouts?.length > 0 && (
				<div class="support">
					{topCallouts.map((callout: Callout) => (
						<Callout
							{...callout}
							class="support-box"
						/>
					))}
				</div>
			)}

			<!-- body -->
			<BlockList {body} showLedeStyle />
		</article>

		<!-- footer navigation -->
		{sequenceNavItems.length > 1 && (
			<nav class="footer-nav">
				<div class={sequenceNavItems.length > 6 ? 'wrapper wide' : 'wrapper'}>

					<!-- progress bar (for small screens) -->
					<ProgressBar
						class="progress"
						value={currentPage}
						range={sequenceNavItems.length}
						>
						Progress: You are currently reading Chapter {currentPage} of {sequenceNavItems.length}.
					</ProgressBar>

					<!-- sequence nav -->
					<SequenceNav class="sequence">
						{sequenceNavItems.map((item) => (
							<SequenceNavItem {...item} next={item.href === url.next}>
								{prismicHelpers.asText(item.title)}
							</SequenceNavItem>
						))}
					</SequenceNav>

					<!-- next chapter -->
					<div class="next">
						{nextChapter && (
							<ReadNextLink
								align="end"
								class="next"
								eyebrowSize="gamma"
								link={nextChapter.href}
								titleSize="beta"
							>
								<Fragment slot="eyebrow">
									Next: {`${project.chapterLabel} ${currentPage + 1}`}
								</Fragment>
								<Fragment slot="title">
									{prismicHelpers.asText(nextChapter.title)}
								</Fragment>
							</ReadNextLink>
						)}
						{project.status === 'Finished' && !nextChapter && (
							<aside class="end | type-role-display type-scale-gamma">
								The end
							</aside>
						)}
					</div>
				</div>
			</nav>
		)}

	</main>

	<!-- Bottom callouts -->
	{bottomCallouts?.length > 0 && (
		<div class="support bottom">
			{bottomCallouts.map((callout: Callout) => (
				<Callout
					{...callout}
					class="support-box"
				/>
			))}
		</div>
	)}
	<MainFooter />
</Layout>

<style>
	.chapter {
		display: flex;
		flex-direction: column;
		gap: var(--space-xwide);
		padding-block: var(--space-xwide);
	}

	.headline {
		text-align: center;
		display: flex;
		flex-direction: column;
		gap: var(--space-wide);
	}

	.headline-chapter {
		display: flex;
		flex-direction: column;
		gap: var(--space-xxnarrow);
	}

	:global(.sequence) {
		display: none;
	}

	@media screen and (min-width: 36em) {
		:global(.progress) {
			display: none;
		}

		:global(.sequence) {
			display: block;
		}
	}

	.headline,
	.footer-nav {
		padding-inline: var(--space-outside);
	}

	.wrapper {
		margin-inline: auto;
		width: var(--content-width-default);
		max-width: 100%;
	}

	.wrapper.wide {
		width: var(--content-width-wide);
	}

	.footer-nav {
		padding-block-end: var(--space-xwide);
	}

	.next {
		padding-block-start: var(--space-wide);
	}

	.end {
		text-align: end;
		font-style: italic;
		color: var(--color-secondary);
	}

	.support {
		padding-inline: var(--space-outside);
	}

	.support.bottom {
		padding-block-end: var(--space-xwide);
	}

	.support :global(.support-box) {
		max-width: var(--content-width-default);
		margin-inline: auto;
	}
</style>
