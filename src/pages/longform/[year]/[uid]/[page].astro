---
// assets
import '@styles/tokens/spacing.css';
import '@styles/tokens/contentWidth.css';

// utilities
import prismic from '@lib/prismic';
import * as prismicHelpers from '@prismicio/helpers';
import { format } from 'date-fns';

// components
import Layout from '@layouts/BaseLayout.astro';
import BlockList from '@components/BlockList.astro';
import Heading from '@components/blocks/Heading.astro';
import SequenceNav from '@components/navigation/SequenceNav.astro';
import SequenceNavItem from '@components/navigation/SequenceNavItem.astro';

// types
import type { Align } from '@lib/types';
import type { TitleField } from '@prismicio/types';
import type { Props as SequenceNavItemProps } from '@components/navigation/SequenceNavItem.astro';

export interface SequenceNavItemData extends SequenceNavItemProps {
	title: TitleField;
}

// Using 'nested pagination' to generate 'chapter' pages for each longform project
// -> https://docs.astro.build/en/core-concepts/routing/#nested-pagination
export async function getStaticPaths({ paginate }) {
	// query all longform projects
	// -> use graphQuery to fetch linked Chapter data for each project
	const projectsResponse = await prismic.getAllByType('longform', {
		orderings: {
			field: 'my.longform.date',
			direction: 'desc',
		},
		graphQuery: `
			{
				longform {
					...longformFields
					chapters {
						chapter {
							...on longform_chapter {
								...longform_chapterFields
							}
						}
					}
				}
			}
		`,
	});

	// loop over each project and create a massaged list of chapters to be paginated
	return projectsResponse.map(({ uid, data }) => {
		const year = format(prismicHelpers.asDate(data.date), 'yyyy');
		const chapters = data.chapters.map(({ chapter }) => {
			const {
				title,
				subtitle,
				highlight_color: highlight,
				primary_foreground_color: primary,
				secondary_foreground_color: secondary,
				background_color: bg,
				body,
			} = chapter.data;

			return {
				uid,
				title,
				subtitle,
				body,
				project: {
					uid,
					title: data.title,
					subtitle: data.subtitle,
					chapterLabel: data.chapter_label,
					chapterList: data.chapters.map(({ chapter }) => chapter.data.title),
				},
				theme: {
					bg,
					highlight,
					primary,
					secondary,
				},
			};
		});

		// const chapterNavList = chapters.map(({ title, uid }) => ({ title, uid, data, }));

		// one chapter per page under the given project params (patH)
		return paginate(chapters, {
			pageSize: 1,
			params: { year, uid },
		})

	});
}

const {
	year,
	uid,
} = Astro.params;

const {
	url,
	data,
	currentPage,
	lastPage,
} = Astro.props.page;

const {
	title,
	subtitle,
	body,
	project,
	theme,
} = data[0];

function sequenceNavItemAlign(index: number): Align {
	if (index === 0) return 'start';
	if (index === lastPage - 1) return 'end';
	return 'center';
}

// list of chapter links for the SequenceNav at the top and bottom of the page
const sequenceNavItems = project.chapterList.map(
	(title: TitleField, index: number): SequenceNavItemData => ({
		title,
		href: `/longform/${year}/${uid}/${index + 1}/`,
		complete: currentPage > index + 1,
		current: currentPage === index + 1,
		tooltipAlign: sequenceNavItemAlign(index),
	})
);
---

<Layout>
	<article>

		<!-- titling -->
		<header>
			<div class="wrapper">

				<!-- project title -->
				<Heading level={1} text={project.title} />
				{project.subtitle && <Heading level={1} subheading text={project.subtitle} />}

				<!-- sequence nav -->
				<div class="header-nav">
					<SequenceNav>
						{sequenceNavItems.map((item) => (
							<SequenceNavItem {...item}>{prismicHelpers.asText(item.title)}</SequenceNavItem>
						))}
					</SequenceNav>
				</div>

				<!-- chapter title -->
				<Heading level={3} subheading>{`${project.chapterLabel} ${currentPage}`}</Heading>
				<Heading level={2} class="header-chapter" text={title} />
				{subtitle && <Heading level={3} class="header-chapter" subheading text={subtitle} />}
			</div>
		</header>

		<!-- body -->
		<BlockList {body} showLedeStyle />
	</article>

	<!-- sequence nav -->
	<nav class="footer-nav">
		<div class="wrapper">
			<SequenceNav>
				{sequenceNavItems.map((item) => (
					<SequenceNavItem {...item} next={item.href === url.next}>
						{prismicHelpers.asText(item.title)}
					</SequenceNavItem>
				))}
			</SequenceNav>
		</div>
	</nav>
</Layout>

<style>
	article {
		padding-block: var(--space-xwide);
	}

	article > * + * {
		padding-block-start: var(--space-xwide);
	}

	header {
		text-align: center;
	}

	header,
	.footer-nav {
		padding-inline: var(--space-outside);
	}

	.wrapper {
		margin-inline: auto;
		max-width: var(--content-width-wide);
	}

	.header-nav {
		padding-block: var(--space-wide);
	}

	.header-chapter {
		padding-block-start: var(--space-xxnarrow);
	}

	.footer-nav {
		padding-block-end: var(--space-xwide);
	}
</style>
