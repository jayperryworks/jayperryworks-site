---
// --- assets
import '@styles/tokens/color.css';
import '@styles/tokens/contentWidth.css';
import '@styles/tokens/spacing.css';
import '@styles/utilities/type.css';

// --- utils
import * as prismicHelpers from '@prismicio/helpers';
import prismic from '@lib/prismic';
import { format } from 'date-fns';

// --- components
import Heading from '@components/blocks/Heading.astro';
import BookCard from '@components/layout/BookCard.astro';
import Gallery from '@components/layout/Gallery.astro';
import MainNav from '@components/navigation/MainNav.astro';
import MainFooter from '@components/navigation/MainFooter.astro';
import BlockList from '@components/BlockList.astro';

// --- layout
import Layout from '@layouts/BaseLayout.astro';

const pageData = await prismic.getByUID('index_page', 'bookshelf');

const {
	body,
	seo_description,
	seo_image,
	seo_title,
	short_title: shortTitle,
	subtitle,
	title,
} = pageData.data;

const seo = {
	description: seo_description,
	image: seo_image?.url,
	imageAlt: seo_image?.alt,
	title: seo_title || prismicHelpers.asText(title),
};

const booksResponse = await prismic.getAllByType('book', {
	orderings: {
		field: 'my.book.date_started',
		direction: 'desc',
	},
});

const books = await Promise.all(booksResponse.map(async ({
	uid,
	tags,
	data,
}) => {
	const {
		author,
		isbn,
		olid,
		purchase_url: purchaseURL,
		related_content: relatedContent,
		title,
	} = data;

	// query the Open Library API with the book's ISBN number
	if (isbn || olid) {
		let bookData = {
			actions: [
				{
					label: 'Purchase',
					url: prismicHelpers.asLink(purchaseURL),
					type: 'external'
				},
			],
			tags: tags || [],
			author,
			relatedContent,
			title,
			uid,
		};

		// try to fetch additional data from OpenLibrary
		const queryParams = {
			bibkeys: isbn ? `ISBN:${isbn}` : `OLID:${olid}`,
			format: 'json',
			jscmd: 'data',
		}
		const queryString = Object.keys(queryParams)
			.map((key) => `${key}=${queryParams[key]}`)
			.join('&');

		// Open Library API docs: https://openlibrary.org/dev/docs/api/books
		const openLibraryResponse = await fetch(`http://openlibrary.org/api/books?${queryString}`);

		if (openLibraryResponse.status === 200) {
			const openLibraryData = await openLibraryResponse.json();

			const {
				publish_date,
				publishers,
				cover: coverList,
				url: infoURL,
			} = openLibraryData[queryParams.bibkeys];

			bookData.publishDate = publish_date && format(new Date(publish_date), 'yyyy');
			bookData.cover = coverList && Object.values(coverList).pop();

			bookData.publisher = publishers?.length > 0 && publishers[0].name;

			bookData.actions.unshift({
				label: 'Open Library',
				url: infoURL,
				type: 'external'
			});

			return bookData;
		}

		// if the request to OL fails, just use the data we have from the CMS
		return bookData;
	}
}));
---

<Layout
	pageTitle={shortTitle}
	path="bookshelf"
	{seo}
>
	<MainNav segment="bookshelf" />
	<main>
		<header class="headline">
			<Heading
				align="center"
				level={1}
				text={title}
			/>
			{subtitle && (
				<Heading
					align="center"
					level={4}
					subheading
					text={subtitle}
				/>
			)}
		</header>

		<BlockList {body} showLedeStyle />

		<div class="wrapper">
			<Gallery gutter="wide">
				{books.filter((b) => b !== undefined).map((book) => (
					<li
						class="item"
						data-tags={book?.tags?.join(' ')}
						id={book.uid}
					>
						<BookCard
							title={book.title}
							author={book.author}
							cover={book.cover ? { src: book.cover } : undefined}
							actions={book.actions}
						>
							{book.publisher && book.publishDate && (
								<p
									slot="metadata"
									class="metadata type-role-accent type-scale-zeta"
								>
									{[book.publisher, book.publishDate].join(', ')}
								</p>
							)}
						</BookCard>
					</li>
				))}
			</Gallery>
		</div>
	</main>
	<MainFooter />
</Layout>

<style>
	.headline,
	.wrapper {
		margin-inline: auto;
		padding-block-start: var(--space-xwide);
		padding-inline: var(--space-outside);
	}

	.headline {
		max-width: var(--content-width-wide);
		padding-block-end: var(--space-wide);
	}

	.wrapper {
		max-width: var(--content-width-xxwide);
		padding-block-end: var(--space-xwide);
	}

	.item {
		display: flex;
		flex-direction: column;
		gap: var(--space-narrow);
	}
</style>
