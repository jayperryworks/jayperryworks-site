---
// styles & assets
import '@styles/tokens/color.css';
import '@styles/tokens/contentWidth.css';
import '@styles/tokens/spacing.css';
import '@styles/tokens/type.css';
import '@styles/utilities/borders.css';
import '@styles/utilities/type.css';
import arrowRight from '@icons/arrow-right.svg?raw';
import externalLink from '@icons/external-link.svg?raw';

// helpers
import { format } from 'date-fns';
import { blog as permalink } from '@lib/permalinks';
import { sentenceCase } from '@lib/stringHelpers';
import * as prismicHelpers from '@prismicio/helpers';
import prismic from '@lib/prismic';

// components
import BlockList from '@components/BlockList.astro';
import Button from '@components/elements/Button.astro';
import Icon from '@components/elements/Icon.astro';
import Layout from '@layouts/BaseLayout.astro';

// types
import type { Slice, TitleField, LinkField, Tags } from '@prismicio/types';

export type PaginationLink = {
	path: string;
	title: string;
	subtitle?: string;
};

export interface Props {
	body: Array<Slice>;
	date: string;
	link?: LinkField;
	next?: PaginationLink;
	series?: LinkField;
	subtitle?: TitleField;
	tags?: Tags;
	title: TitleField;
}

export async function getStaticPaths() {
 	const posts = await prismic.getAllByType('blog_post', {
 		orderings: {
 			field: 'my.blog_post.date',
 			direction: 'desc',
 		},
 	});

 	return posts.map(({ uid, tags, data }, index) => {
 		const { date } = data;
		 const nextPost = posts[index + 1];

 		return {
 			params: {
 				year: format(new Date(date), 'yyyy'),
 				month: format(new Date(date), 'MM'),
 				day: format(new Date(date), 'dd'),
 				uid,
 			},
 			props: {
 				...data,
 				tags,
 				link: prismicHelpers.asLink(data.link),
 				next: nextPost && {
					title: nextPost.data.title,
					subtitle: nextPost.data.subtitle,
					path: permalink(nextPost),
				},
 			},
 		};
 	});
}

const {
	year,
	month,
	day,
	uid,
} = Astro.params;

const {
	body,
	date,
	link,
	next,
	series,
	subtitle,
	tags,
	title,
} = Astro.props as Props;
---

<Layout
	pageTitle={prismicHelpers.asText(title)}
	path="blog"
>
	<article>
		<header>
			<h1>{prismicHelpers.asText(title)}</h1>
			{subtitle && (
				<p class="subtitle" set:html={prismicHelpers.asText(subtitle)}></p>
			)}
			<time datetime={date} class="date">
				{format(new Date(date), 'MMMM dd, yyyy')}
			</time>
		</header>

		<BlockList {body} showLedeStyle />

		{link && (
			<footer class="link">
				<Button
					href={link}
					iconRight={externalLink}
				>
					Direct link
				</Button>
			</footer>
		)}
	</article>

	<!-- pagination nav -->
	{next && (
		<nav>
			<section class="nav-wrapper tags">
				<h2 class="type-role-accent type-scale-epsilon">Filed&nbsp;under:</h2>
				<ul class="tag-list type-role-accent">
					{tags.map((tag) => (
						<li>
							<a href={`/blog/tags/${tag}/`}>{sentenceCase(tag)}</a>
						</li>
					))}
				</ul>
			</section>
			<section class="nav-wrapper">
				<p class="next">
					<a href={next.path} class="next-eyebrow">Next post:</a>
					<span class="next-title">
						<a href={next.path}>{prismicHelpers.asText(next.title)}</a>
					</span>
					<Icon svg={arrowRight} size="large" class="next-icon" />
				</p>
			</section>
		</nav>
	)}
</Layout>

<style>
	article {
		padding: var(--space-xwide) var(--space-outside);
	}

	header {
		margin-inline: auto;
		max-width: var(--content-width-xwide);
		padding-block-end: var(--space-wide);
		text-align: center;
	}

	.subtitle {
		color: var(--color-secondary);
		font-family: var(--type-font-accent);
		font-size: var(--type-scale-gamma);
		font-weight: 100;
		max-width: none;
		padding-top: var(--space-xxnarrow);
	}

	.date {
		color: var(--color-secondary);
		display: block;
		font-family: var(--type-font-accent);
		font-weight: 200;
		padding-block-start: var(--space-narrow);
	}

	.link {
		margin-inline: auto;
		max-width: var(--content-width-default);
		padding-top: var(--space-wide);
	}

	footer {
		margin-inline: auto;
		max-width: var(--content-width-default);
		padding-top: var(--space-xwide);
	}

	.tags {
		display: flex;
		align-items: baseline;
		gap: 0.25em;
		flex-wrap: wrap;
	}

	@media screen and (min-width: 30em) {
		.tags {
			gap: var(--space-xnarrow);
			flex-wrap: nowrap;
		}
	}

	.tag-list {
		list-style: none;
		padding-inline-start: 0;
		padding-block-start: var(--space-xxnarrow);
		margin: 0;
		display: flex;
		gap: 0.5em;
		flex-wrap: wrap;
		align-items: baseline;
	}


	.tag-list li {
		font-size: 0; /* kill whitespace margins */
	}

	.tag-list li::after {
		content: ', ';
		margin-inline-start: 0.1em;
		font-size: var(--type-scale-epsilon);
	}

	.tag-list li:last-child::after {
		content: '';
	}

	.tag-list a {
		font-size: var(--type-scale-epsilon);
	}

	nav {
		padding-block-end: var(--space-xwide);
		padding-inline: var(--space-outside);
	}

	.nav-wrapper {
		margin-inline: auto;
		max-width: var(--content-width-default);
		border-top: var(--border-default);
		padding-block-start: var(--space-wide);
	}

	.nav-wrapper + .nav-wrapper {
		margin-block-start: var(--space-wide);
	}

	.next {
		align-items: start;
		display: inline-grid;
		gap: 0 var(--space-medium);
		grid-template-areas:
			'eyebrow .'
			'title icon';
		grid-template-columns: minmax(0, 1fr) 1.44em;
		grid-template-rows: auto;
		justify-items: start;
		transition: 0.25s color ease;
		will-change: color;
	}

	.next:hover {
		color: var(--color-highlight);
	}

	.next-eyebrow {
		border: 0;
		color: var(--color-secondary);
		display: inline-block;
		font-family: var(--type-font-accent);
		font-weight: 200;
		grid-area: eyebrow;
	}

	.next-title {
		display: block;
		font-family: var(--type-font-display);
		font-size: var(--type-scale-gamma);
		grid-area: title;
		line-height: var(--type-leading-tight);
	}

	.next :global(.next-icon) {
		grid-area: icon;
		margin: 0;
	}
</style>
