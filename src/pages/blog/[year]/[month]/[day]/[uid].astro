---
// styles & assets
import '@styles/components/bookend.css';
import '@styles/utilities/borders.css';
import arrowLeft from '@icons/arrow-left.svg?raw';
import arrowRight from '@icons/arrow-right.svg?raw';
import externalLink from '@icons/external-link.svg?raw';

// helpers
import { format } from 'date-fns';
import prismic from '@lib/prismic.ts';
import prismicHelpers from '@prismicio/helpers';

// components
import BlockList from '@components/BlockList.astro';
import Button from '@components/elements/Button.astro';
import Icon from '@components/elements/Icon.astro';
import Layout from '@layouts/BaseLayout.astro';

// types
import type { Slice, TitleField, LinkField, Tags } from '@prismicio/types';

export type PaginationLink = {
	path: string;
	title: TitleField;
};

export interface Params {
	year: string;
	month: string;
	day: string;
	uid: string;
}

export interface Props {
		body: Array<Slice>;
		date: string;
		link?: LinkField;
		next?: PaginationLink;
		prev?: PaginationLink;
		series?: LinkField;
		subtitle?: TitleField;
		tags?: Tags;
		title: TitleField;
}

export async function getStaticPaths() {
 	const posts = await prismic.getAllByType('blog_post', {
 		orderings: {
 			field: 'my.blog_post.date',
 			direction: 'desc',
 		},
 	});

 	return posts.map(({ uid, tags, data }, index) => {
 		const { date } = data;

 		// create urls for next and previous blog posts
 		const nav = [
 			posts[index - 1],
 			posts[index + 1],
 		].map((post) => {
 			if (post) {
 				const { data, uid } = post;
 				const year = format(new Date(data.date), 'yyyy');
 				const month = format(new Date(data.date), 'MM');
 				const day = format(new Date(data.date), 'dd');

 				return {
 					path: `/blog/${year}/${month}/${day}/${uid}`,
 					title: prismicHelpers.asText(data.title),
 				};
 			}
 		});

 		return {
 			params: {
 				year: format(new Date(date), 'yyyy'),
 				month: format(new Date(date), 'MM'),
 				day: format(new Date(date), 'dd'),
 				uid,
 			},
 			props: {
 				...data,
 				tags,
 				link: prismicHelpers.asLink(data.link),
 				prev: nav[0],
 				next: nav[1],
 			},
 		};
 	});
}

const {
	year,
	month,
	day,
	uid,
} = Astro.params as Params;
const {
	body,
	date,
	link,
	next,
	prev,
	series,
	subtitle,
	tags,
	title,
} = Astro.props as Props;
---

<Layout
	pageTitle={prismicHelpers.asText(title)}
	path="blog"
>
	<article>
		<header>
			<h1>{prismicHelpers.asText(title)}</h1>
			{subtitle && (
				<p class="subtitle" set:html={prismicHelpers.asText(subtitle)}></p>
			)}
			<time datetime={date} class="date">
				{format(new Date(date), 'MMMM dd, yyyy')}
			</time>
		</header>

		<BlockList {body} showLedeStyle />

		{link && (
			<footer>
				<Button
					href={link}
					iconRight={externalLink}
				>
					Direct link
				</Button>
			</footer>
		)}
	</article>

	<!-- pagination nav -->
	<nav class="border-seam-top">
		<ul class="bookend justify-end nav-list">
			{prev && (
				<li class="bookend-item nav-item">
					<Icon svg={arrowLeft} size="large" class="nav-icon before" />
					<a href={prev.path} class="nav-eyebrow">Previous</a>
					<a href={prev.path} class="nav-title" set:html={prev.title}></a>
				</li>
			)}
			{next && (
				<li class="bookend-item nav-item">
					<a href={next.path} class="nav-eyebrow">Next</a>
					<a href={prev.path} class="nav-title" set:html={next.title}></a>
					<Icon svg={arrowRight} size="large" class="nav-icon after" />
				</li>
			)}
		</ul>
	</nav>
</Layout>

<style>
	article {
		padding-block: var(--space-xwide);
		padding-inline: var(--space-outside);
	}

	header {
		margin-inline: auto;
		max-width: var(--content-width-xwide);
		padding-block-end: var(--space-wide);
		text-align: center;
	}

	.subtitle {
		color: var(--color-secondary);
		font-family: var(--type-font-accent);
		font-size: var(--type-scale-gamma);
		font-weight: 100;
		max-width: none;
		padding-top: var(--space-xxnarrow);
	}

	.date {
		color: var(--color-secondary);
		display: block;
		font-family: var(--type-font-accent);
		font-weight: 200;
		padding-block-start: var(--space-narrow);
	}

	footer {
		margin-inline: auto;
		max-width: var(--content-width-default);
		padding-top: var(--space-wide);
	}

	nav {
		padding-block: var(--space-wide);
		padding-inline: var(--space-outside);
	}

	.nav-list {
		text-align: center;
	}

	.nav-item {
		align-items: start;
		gap: 0 var(--space-medium);
		display: inline-grid;
		grid-template-columns: 1.44em minmax(0, 1fr) 1.44em;
		grid-template-rows: auto;
		grid-template-areas:
			'. eyebrow .'
			'start title end';
		justify-items: center;
		transition: 0.25s color ease;
		will-change: color;
	}

	.nav-item:hover {
		color: var(--color-highlight);
	}

	.nav-eyebrow {
		font-family: var(--type-font-accent);
		color: var(--color-secondary);
		display: block;
		border: 0;
		font-weight: 200;
		grid-area: eyebrow;
	}

	.nav-title {
		font-size: var(--type-scale-delta);
		display: block;
		border: 0;
		line-height: var(--type-leading-tight);
		grid-area: title;
	}

	.nav-item :global(.nav-icon) {
		margin: 0;
	}

	.nav-item :global(.nav-icon.before) {
		grid-area: start;
	}

	.nav-item :global(.nav-icon.after) {
		grid-area: end;
	}
</style>
