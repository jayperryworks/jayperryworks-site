---
// styles
import '@styles/tokens/borders.css';
import '@styles/utilities/borders.css';
import '@styles/utilities/type.css';

// assets
import arrowLeft from '@icons/arrow-left.svg?raw';
import arrowRight from '@icons/arrow-right.svg?raw';
import externalLink from '@icons/external-link.svg?raw';

// helpers
import { blogPost } from '@lib/routes';
import { format } from 'date-fns';
import * as prismicHelpers from '@prismicio/helpers';
import prismic from '@lib/prismic';

// components
import BlockList from '@components/BlockList.astro';
import Button from '@components/elements/Button.astro';
import Heading from '@components/blocks/Heading.astro';
import Icon from '@components/elements/Icon.astro';
import Layout from '@layouts/BaseLayout.astro';

export async function getStaticPaths({ paginate }): Promise<Function> {
	const posts = await prismic.getAllByType('blog_post', {
		orderings: {
			field: 'my.blog_post.date',
			direction: 'desc',
		},
	});

	return paginate(posts, { pageSize: 10 });
}

const {
	page
} = Astro.props;

const { next, prev } = page.url;

const postList = page.data.map(({ uid, tags, data }) => {
	// find the slices in each post marked as "include in excerpt"
	const summary = data.body.filter(({ primary }) => primary.include_in_excerpt);

	if (summary.length > 0) {
		return {
			...data,
			summary,
			tags,
			uid,
			link: prismicHelpers.asLink(data.link),
			path: blogPost({ uid, data }),
			readMore: summary.length < data.body.length,
		};
	}

	throw new Error(`Post missing a summary: ${prismicHelpers.asText(data.title)}, ${data.date}`);
});
---

<Layout
	path="blog"
	pageTitle="Blog"
>
	<ul class="post-list">
		{postList.map((post, index) => (
			<li class={index > 0 ? 'border-seam-top' : ''}>
				<article
					class="post"
					id={post.uid}
				>
					<header class="post-header">
						<Heading level={2}>
							<a
								href={post.path}
								class="type-link-undecorated"
								>
								{prismicHelpers.asText(post.title)}
							</a>
						</Heading>
						{post.subtitle && (
							<Heading subheading level={3}>{prismicHelpers.asText(post.subtitle)}</Heading>
						)}
						<time
							datetime={post.date}
							class="date"
						>
							{format(new Date(post.date), 'MMMM dd, yyyy')}
						</time>
					</header>
					<BlockList body={post.summary} />
					{(post.readMore || post.link) && (
						<footer class="post-footer">
							<div class="post-buttons | wrapper">
								{post.readMore && (
									<Button
										href={post.path}
										iconRight={arrowRight}
									>
										Read more
									</Button>
								)}
								{post.link && (
									<Button
										href={post.link}
										iconRight={externalLink}
									>
										Direct link
									</Button>
								)}
							</div>
						</footer>
					)}
				</article>
			</li>
		))}
	</ul>

	<nav class="border-seam-top">
		<ul class="nav-list">
			{prev && (
				<li class="nav-item">
					<a
						class="nav-link"
						href={prev}
					>
						<Icon svg={arrowLeft} class="nav-icon before" />
						<span class="nav-label">Newer posts</span>
					</a>
				</li>
			)}
			{next && (
				<li class="nav-item">
					<a
						class="nav-link"
						href={next}
					>
						<span class="nav-label">Older posts</span>
						<Icon svg={arrowRight} class="nav-icon after" />
					</a>
				</li>
			)}
		</ul>
	</nav>
</Layout>


<style>
	.post-list {
		list-style: none;
		display: block;
		padding-inline-start: 0;
		padding-block: var(--space-xwide);
	}

	.post-list > li + li {
		margin-block-start: var(--space-xwide);
		padding-block-start: var(--space-xwide);
	}

	.post-header {
		margin-inline: auto;
		max-width: var(--content-width-xwide);
		padding-block-end: var(--space-wide);
		padding-inline: var(--space-outside);
		text-align: center;
	}

	.post-header > time {
		padding-block-start: var(--space-medium);
	}

	.post-link {
		border-block-end: var(--border-default);
		margin-inline: auto;
		max-width: var(--content-width-default);
		padding-block-end: var(--space-medium);
		padding-block-start: var(--space-wide);
		text-align: start;
	}

	.post-footer {
		padding-block-start: var(--space-wide);
		padding-inline: var(--space-outside);
	}

	.post-buttons {
		display: flex;
		flex-wrap: wrap;
		gap: var(--space-narrow);
		justify-content: space-between;
	}

	.wrapper {
		max-width: var(--content-width-default);
		margin-inline: auto;
	}

	.date {
		color: var(--color-secondary);
		display: block;
		font-family: var(--type-font-accent);
		font-weight: 200;
		padding-block-start: var(--space-xnarrow);
	}

	nav {
		padding-block: var(--space-wide);
		padding-inline: var(--space-outside);
	}

	.nav-list {
		--gap-vertical: var(--space-narrow);
		--gap-horizontal: var(--space-wide);

		display: flex;
		flex-direction: column;
		gap: var(--gap-vertical);
		list-style: none;
		padding-inline-start: 0;
	}

	.nav-link {
		border: 0;
		font-size: var(--type-scale-gamma);
		display: inline-grid;
		grid-template-columns: [start] 1em [label] minmax(0, 1fr)  [end] 1em;
		align-items: center;
		justify-items: center;
		gap: var(--space-xnarrow);
	}

	.nav-item {
		display: block;
		text-align: center;
	}

	.nav-label {
		grid-area: label;
		display: inline-block;
		border-bottom: var(--border-link);
	}

	.nav-link :global(.nav-icon.before) {
		grid-area: start;
	}

	.nav-link :global(.nav-icon.after) {
		grid-area: end;
	}

	@media screen and (min-width: 32em) {
		.nav-list {
			align-items: flex-start;
			flex-direction: row;
			gap: var(--gap-horizontal);
			justify-content: space-between;
		}

		/* push the last nav link to the right/end of line */
		/* -> use this in addition to justify-content because it works with only one child */
		.nav-item:last-child {
			margin-inline-start: auto;
			text-align: right;
		}
	}
</style>
