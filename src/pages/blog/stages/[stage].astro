---
// styles
import '@styles/tokens/contentWidth.css';

// utils
import { format } from 'date-fns';
import * as prismicHelpers from '@prismicio/helpers';
import prismic from '@lib/prismic';
import { blogPost as permalink } from '@lib/routes';
import { sentenceCase, truncate } from '@lib/stringHelpers';

// components
import Heading from '@components/blocks/Heading.astro';
import Layout from '@layouts/BaseLayout.astro';
import PostListing from '@components/elements/PostListing.astro';
import ReadNextLink from '@components/navigation/ReadNextLink.astro';

// types
export type Post = {
	date: string,
	path: string,
	title: string,
	stage?: string,
	subtitle?: string,
};

export type StaticPath = {
	params: {
		stage: string,
	},
	props: Props,
};

export interface Props {
	posts: Array<Post>;
}

export async function getStaticPaths(): Promise<StaticPath[]> {
	const stagesData = await prismic.getSingle('development_stages');

	const { stage: stages } = stagesData.data;

	// get all the blog posts from Prismic
	const allPosts = await prismic.getAllByType('blog_post', {
		orderings: {
			field: 'my.blog_post.date',
			direction: 'desc',
		},
	});

	// create a list of unique stage names used in the posts
	// const stages = allPosts.reduce((result, post) => {
	// 	const stage = post.data?.stage;
	// 	if (!result.includes(stage)) result.push(stage);
	// 	return result;
	// }, []);

	return stages.reduce((result, stage) => {
		// create an array of post objects for each stage
		const posts = allPosts
			.filter(({ data }) => data.stage === stage.name)
			.map((post) => {
				const { title, subtitle, date, description, stage } = post.data;

				// clean up post data to just what we need for the listings
				return {
					date: prismicHelpers.asDate(date),
					path: permalink(post),
					title: prismicHelpers.isFilled.title(title)
						? prismicHelpers.asText(title)
						: truncate(description, 5),
					subtitle: prismicHelpers.isFilled.title(subtitle)
						? prismicHelpers.asText(subtitle)
						: undefined,
					stage,
				};
			});

		if (posts) {
			result.push({
				params: {
					stage: stage.uid,
				},
				props: {
					posts,
				},
			});
		}

		return result;
	}, []);
}

const {
	stage,
} = Astro.params;

const {
	posts,
} = Astro.props as Props;
---

<Layout
	pageTitle={sentenceCase(stage)}
	path="blog"
>
	<div class="wrapper">
		<header>
			<Heading level={1}>{sentenceCase(stage)} posts</Heading>
		</header>
		<ul class="post-list">
			{posts.map((post) => (
				<li class="post">
					<PostListing {...post} />
				</li>
			))}
		</ul>
		<nav>
			<ReadNextLink
				eyebrowSize="delta"
				link="/blog/page/1"
				titleSize="beta"
			>
				<Fragment slot="eyebrow">More blog posts:</Fragment>
				<Fragment slot="title">Archive</Fragment>
			</ReadNextLink>
		</nav>
	</div>
</Layout>

<style>
	.wrapper {
		padding: var(--space-outside) var(--space-xwide);
	}

	header,
	.post-list,
	nav {
		max-width: var(--content-width-default);
		margin-inline: auto;
	}

	header {
		padding-block-end: var(--space-medium);
	}

	.post-list {
		list-style: none;
		padding-inline-start: 0;
	}

	nav {
		border-top: var(--border-default);
		padding-block: var(--space-xwide);
		margin-block-start: var(--space-xwide);
	}

	.post {
		display: block;
		margin-inline: auto;
		max-width: var(--content-width-default);
	}

	.post + .post {
		padding-block-start: var(--space-wide);
	}
</style>
