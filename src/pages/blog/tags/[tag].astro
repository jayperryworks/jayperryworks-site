---
// styles
import '@styles/tokens/contentWidth.css';

// utils
import { format } from 'date-fns';
import * as prismicHelpers from '@prismicio/helpers';
import prismic from '@lib/prismic';
import { blogPost as permalink } from '@lib/routes';
import { sentenceCase } from '@lib/stringHelpers';

// components
import Heading from '@components/blocks/Heading.astro';
import Layout from '@layouts/BaseLayout.astro';
import ReadNextLink from '@components/navigation/ReadNextLink.astro';

// types
export type Post = {
	title: string,
	subtitle?: string,
	path: string,
	date: string,
};

export type StaticPath = {
	params: {
		tag: string,
	},
	props: Props,
};

export interface Props {
	posts: Array<Post>;
}

export async function getStaticPaths(): Promise<StaticPath[]> {
	// get all the blog posts from Prismic
	const allPosts = await prismic.getAllByType('blog_post', {
		orderings: {
			field: 'my.blog_post.date',
			direction: 'desc',
		},
	});

	// create a list of unique tags used in the blog posts
	const tags = allPosts.reduce((result, post) => {
		post?.tags.forEach((tag) => {
			if (!result.includes(tag)) result.push(tag);
		})
		return result;
	}, []);

	return tags.reduce((result, tag) => {
		// create an array of post objects for each tag
		const posts = allPosts
			.filter(({ tags }) => tags.includes(tag))
			.map((post) => {
				const { title, subtitle, date } = post.data;

				// clean up post data to just what we need for the listings
				return {
					title: prismicHelpers.asText(title),
					subtitle: prismicHelpers.asText(subtitle),
					path: permalink(post),
					date,
				};
			});

		if (posts) {
			result.push({
				params: {
					tag,
				},
				props: {
					posts,
				},
			});
		}

		return result;
	}, []);
}

const {
	tag,
} = Astro.params;

const {
	posts,
} = Astro.props as Props;
---

<Layout
	pageTitle={sentenceCase(tag)}
	path="blog"
>
	<div class="wrapper">
		<header>
			<Heading subheading level={3}>Posts filed under</Heading>
			<Heading level={1}>{sentenceCase(tag)}</Heading>
		</header>
		<ul class="post-list">
			{posts.map((post) => (
				<li class="post">
					<article>
						<time
							class="type-role-accent type-scale-zeta"
							datetime={post.date}
						>
							{format(new Date(post.date), 'yyyy.MM.dd')}
						</time>
						<Heading level={3}>
							<a class="type-link-undecorated" href={post.path}>{post.title}</a>
						</Heading>
						{post.subtitle && (
							<Heading
								subheading
								level={4}
								class="subtitle"
							>
								<a class="type-link-undecorated" href={post.path}>{post.subtitle}</a>
							</Heading>
						)}
					</article>
				</li>
			))}
		</ul>
		<nav>
			<ReadNextLink
				eyebrow="More blog posts:"
				title="Archive"
				link="/blog/page/1"
			/>
		</nav>
	</div>
</Layout>

<style>
	.wrapper {
		padding: var(--space-outside) var(--space-xwide);
	}

	header,
	.post-list,
	nav {
		max-width: var(--content-width-default);
		margin-inline: auto;
	}

	header {
		padding-block-end: var(--space-medium);
	}

	.post-list {
		list-style: none;
		padding-inline-start: 0;
	}

	nav {
		border-top: var(--border-default);
		padding-block: var(--space-xwide);
		margin-block-start: var(--space-xwide);
	}

	.post {
		display: block;
		margin-inline: auto;
		max-width: var(--content-width-default);
	}

	.post + .post {
		padding-block-start: var(--space-wide);
	}

	.subtitle {
		/* nudge the subtitle down slightly so date-title-subtitle spacing is optically even */
		padding-block-start: 0.15em;
	}
</style>
