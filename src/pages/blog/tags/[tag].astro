---
// styles
import '@styles/tokens/contentWidth.css';

// utils
import { format } from 'date-fns';
import * as prismicHelpers from '@prismicio/helpers';
import prismic from '@lib/prismic';
import { blogPost as permalink } from '@lib/routes';
import { sentenceCase, truncate } from '@lib/stringHelpers';

// components
import Heading from '@components/blocks/Heading.astro';
import Layout from '@layouts/BaseLayout.astro';
import BlogListings from '@components/navigation/BlogListings.astro';
import BlogListingsPost from '@components/navigation/BlogListingsPost.astro';
import MainFooter from '@components/navigation/MainFooter.astro';
import MainNav from '@components/navigation/MainNav.astro';
import RevealOnScroll from '@components/layout/RevealOnScroll.astro';

// types
export type Post = {
	date: string,
	path: string,
	title: string,
	stage?: string,
	subtitle?: string,
};

export type StaticPath = {
	params: {
		tag: string,
	},
	props: Props,
};

export interface Props {
	posts: Array<Post>;
}

export async function getStaticPaths(): Promise<StaticPath[]> {
	// get all the blog posts from Prismic
	const allPosts = await prismic.getAllByType('blog_post', {
		orderings: {
			field: 'my.blog_post.date',
			direction: 'desc',
		},
	});

	// create a list of unique tags used in the blog posts
	const tags = allPosts.reduce((result, post) => {
		post?.tags.forEach((tag) => {
			if (!result.includes(tag)) result.push(tag);
		})
		return result;
	}, []);

	return tags.reduce((result, tag) => {
		// create an array of post objects for each tag
		const posts = allPosts
			.filter(({ tags }) => tags.includes(tag))
			.map((post) => {
				const { title, subtitle, date, description, stage } = post.data;

				// clean up post data to just what we need for the listings
				return {
					date: prismicHelpers.asDate(date),
					path: permalink(post),
					title: prismicHelpers.isFilled.title(title)
						? prismicHelpers.asText(title)
						: truncate(description, 5),
					stage,
					subtitle: prismicHelpers.asText(subtitle),
				};
			});

		if (posts) {
			result.push({
				params: {
					tag,
				},
				props: {
					posts,
				},
			});
		}

		return result;
	}, []);
}

const {
	tag,
} = Astro.params;

const {
	posts,
} = Astro.props as Props;
---

<Layout pageTitle={sentenceCase(tag)}>
	<MainNav segment="blog" />
	<main class="wrapper">
		<RevealOnScroll tag="header">
			<Heading subheading level={3}>Posts filed under</Heading>
			<Heading level={1}>{sentenceCase(tag)}</Heading>
		</RevealOnScroll>
		<BlogListings class="post-list">
			{posts.map((post) => (
				<li class="post">
					<BlogListingsPost {...post} />
				</li>
			))}
		</BlogListings>
	</main>
	<MainFooter />
</Layout>

<style>
	.wrapper {
		padding: var(--space-outside) var(--space-xwide);
	}

	.wrapper > :global(*) {
		max-width: var(--content-width-default);
		margin-inline: auto;
	}

	header {
		padding-block-end: var(--space-medium);
	}

	.post-list {
		list-style: none;
		padding-inline-start: 0;
	}

	nav {
		border-top: var(--border-default);
		padding-block: var(--space-xwide);
		margin-block-start: var(--space-xwide);
	}

	.post {
		display: block;
		margin-inline: auto;
		max-width: var(--content-width-default);
	}

	.post + .post {
		padding-block-start: var(--space-wide);
	}
</style>
