---
// assets
import '@styles/tokens/spacing.css';

// helpers
import prismic from '@lib/prismic';
import prismicHelpers from '@prismicio/helpers';

// components
import Button from '@components/elements/Button.astro';
import Heading from '@components/blocks/Heading.astro';
import Layout from '@layouts/BaseLayout.astro';
import RenderedText from '@components/elements/RenderedText.astro';

// fetch content
const response = await prismic.getSingle('homepage');

const {
	headline,
	intro,
	intro_link: introLink,
	body,
} = response.data;

function linkResolver(doc): string {
	if (doc.type === 'page' && doc.uid) return `/${doc.uid}/`;
	if (doc.type === 'design_index') return `/design/`;
}

const toc = body.map(({ slice_type: type, primary, items }) => ({
	type,
	title: prismicHelpers.asText(primary.title1),
	subtitle: prismicHelpers.asText(primary.subtitle),
	cta: {
		link: primary.call_to_action_link,
		label: primary.call_to_action_label,
	},
	description: {
		prismicText: primary.description
	},
	coverImages: {
		gutter: primary.cover_images_gutter,
		images: items,
	}
}));
---

<Layout path="home">
	<header>
		<Fragment set:html={prismicHelpers.asHTML(headline)}></Fragment>
		<Fragment set:html={prismicHelpers.asHTML(intro)}></Fragment>
		<Button href={prismicHelpers.asLink(introLink, linkResolver)}>A bit more about me</Button>
	</header>
	{toc.map((item) => (
		<article>
			<Heading level={2}>{item.title}</Heading>
			{item.subtitle && (
				<Heading subheading level={3}>{item.subtitle}</Heading>
			)}
			<RenderedText {...item.description} />
			<Button href={prismicHelpers.asLink(item.cta.link, linkResolver)}>{item.cta.label}</Button>
		</article>
	))}
</Layout>
