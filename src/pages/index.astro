---
// assets
import '@styles/tokens/contentWidth.css';
import '@styles/tokens/spacing.css';
import '@styles/utilities/borders.css';
import '@styles/utilities/type.css';
import arrowDown from '@icons/arrow-down.svg?raw';
import arrowRight from '@icons/arrow-right.svg?raw';

// utils
import { linkResolver } from '@lib/routes';
import * as prismicHelpers from '@prismicio/helpers';
import prismic from '@lib/prismic';

// components
import Button from '@components/elements/Button.astro';
import Icon from '@components/elements/Icon.astro';
import Heading from '@components/blocks/Heading.astro';
import Passage from '@components/blocks/Passage.astro';
import Billboard from '@components/blocks/Billboard.astro';
import Feed from '@components/blocks/Feed.astro';
import Layout from '@layouts/BaseLayout.astro';

// types
import type { ImageField } from '@prismicio/types';

// fetch content
const response = await prismic.getSingle('homepage');

const {
	headline,
	intro,
	body,
} = response.data;

let introLink = await prismicHelpers.asLink(response.data.intro_link, linkResolver);

const toc = body.map(({ slice_type: type, primary, items }) => {
		const {
			call_to_action_label: label,
			call_to_action_link: link,
			cover_images_gutter: imagesGutter,
			description: prismicText,
			subtitle,
			title,
			title1,
		} = primary;

		const images = (type === 'billboard') && items.reduce((result, item) => {
		const {
			device = 'None',
			priority = '1',
			relative_size: relativeSize,
			cover_image: source,
		} = item;

		if ((source as ImageField).url === '') return result;

		result.push({
			device,
			priority,
			relativeSize,
			source,
		});
		return result;
	}, []);

		return {
			type,
			images,
			imagesGutter,
			title: prismicHelpers.asText(title || title1),
			subtitle: prismicHelpers.asText(subtitle),
			cta: {
				link,
				label,
			},
			description: {
				prismicText,
			},
		};
	});
---

<Layout path="home" headerOverlay>
	<!-- intro -->
	<header>
		<div class="intro">
			<div class="blurb">
				<Heading level={1}>{prismicHelpers.asText(headline)}</Heading>
				<Passage
					text={{ prismicText: intro }}
					typeSize="delta"
					typeFace="display"
					class="blurb"
				/>
				<Button
					class="blurb-cta"
					href={introLink}
					iconRight={arrowRight}
				>
					A bit more about me
				</Button>
			</div>
			<a
				class="type-role-accent type-scale-epsilon type-link-undecorated"
				href="#toc"
			>
				<Icon
					align="baseline"
					margin="right"
					svg={arrowDown}
				/>
				Table of contents
			</a>
		</div>
	</header>

	<!-- TOC panels -->
	<ul
		class="toc"
		id="toc"
	>
		{toc.map((item, index) => (
			<li class="border-seam-top">
				<div class="wrapper">
					{item.type === 'billboard' && (
						<Billboard
							number={index + 1}
							{...item}
						/>
					)}
					{item.type === 'feed' && (
						<Feed
							number={index + 1}
							{...item}
						/>
					)}
				</div>
			</li>
		))}
	</ul>
</Layout>

<style>
	header {
		display: flex;
		min-height: 100vh;
		padding-block-end: var(--space-narrow);
		padding-block-start: var(--space-wide);
		padding-inline: var(--space-outside);
	}

	.intro {
		align-items: center;
		display: grid;
		flex: 1;
		gap: var(--space-medium);
		grid-template-rows: 1fr auto;
		margin-inline: auto;
		max-width: var(--content-width-xxwide);
	}


	.blurb > :global(* + *) {
		padding-block-start: var(--space-medium);
	}

	.blurb :global(.blurb-cta) {
		margin-block-start: var(--space-wide);
	}

	.toc {
		list-style: none;
		padding-left: 0;
	}

	.toc > li {
		display: flex;
		flex-direction: column;
		min-height: 100vh;
		padding-block: var(--space-wide);
		padding-inline: var(--space-outside);
	}

	.wrapper {
		display: flex;
		flex-direction: column;
		flex: 1;
		margin-inline: auto;
		max-width: var(--content-width-xxwide);
		width: 100%;
	}
</style>
