---
// assets
import '@styles/tokens/contentWidth.css';
import '@styles/tokens/spacing.css';
import '@styles/utilities/borders.css';
import '@styles/utilities/type.css';
import arrowDown from '@icons/arrow-down.svg?raw';
import arrowRight from '@icons/arrow-right.svg?raw';

// utils
import { linkResolver } from '@lib/routes';
import * as prismicHelpers from '@prismicio/helpers';
import prismic from '@lib/prismic';

// components
import Button from '@components/elements/Button.astro';
import Heading from '@components/blocks/Heading.astro';
import Icon from '@components/elements/Icon.astro';
import Image from '@components/elements/Image.astro';
import Layout from '@layouts/BaseLayout.astro';
import Passage from '@components/blocks/Passage.astro';

// fetch content
const response = await prismic.getSingle('homepage');

const {
	headline,
	intro,
	body,
} = response.data;

let introLink = await prismicHelpers.asLink(response.data.intro_link, linkResolver);

const toc = await Promise.all(
	body.map(async ({ slice_type: type, primary, items }) => {
		const link = primary.call_to_action_link
			&& await prismicHelpers.asLink(primary.call_to_action_link, linkResolver);

		return {
			type,
			title: prismicHelpers.asText(primary.title || primary.title1),
			subtitle: prismicHelpers.asText(primary.subtitle),
			cta: {
				link,
				label: primary.call_to_action_label,
			},
			description: {
				prismicText: primary.description
			},
			coverImages: {
				gutter: primary.cover_images_gutter,
				images: items.map((item) => ({
					source: item.cover_image,
					device: item.device,
					relativeSize: item.relative_size,
				})),
			}
		};
	})
);
---

<Layout path="home" headerOverlay>

	<!-- intro -->
	<header class="panel">
		<div class="fill-vertical">
			<div class="intro wrapper">
				<Heading level={1}>{prismicHelpers.asText(headline)}</Heading>
				<Passage
					text={{ prismicText: intro }}
					typeSize="delta"
					class="blurb"
				/>
				<Button
					class="intro-cta"
					href={introLink}
					iconRight={arrowRight}
				>
					A bit more about me
				</Button>
			</div>
		</div>
		<div class="toc-link">
			<a
				class="type-role-accent type-scale-epsilon type-link-undecorated"
				href="#toc"
			>
				<Icon
					align="baseline"
					margin="right"
					svg={arrowDown}
				/>
				Table of contents
			</a>
		</div>
	</header>

	<!-- TOC panels -->
	<section id="toc">
		{toc.map((item, index) => (
			<article class="panel border-seam-top">
				<div class="wrapper flex">
					{/* https://bobbyhadz.com/blog/javascript-pad-number-with-leading-zeros */}
					<Heading level={3} subheading>{String(index + 1).padStart(2, '0')}</Heading>
					<Heading level={2}>{item.title}</Heading>
					{item.subtitle && (
						<Heading subheading level={3}>{item.subtitle}</Heading>
					)}
					<Passage
						class="blurb"
						text={item.description}
					/>
					<Button
						href={item.cta.link}
						iconRight={arrowRight}
					>
						{item.cta.label}
					</Button>
					{item.coverImages?.images?.length > 0 && (
						<figure>
							{item.coverImages.images.map(({ source }) => (
								source && <Image {source} />
							))}
						</figure>
					)}
				</div>
			</article>
		))}
	</section>
</Layout>

<style>
	.panel {
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: start;
		gap: var(--space-medium);
		min-height: 100vh;
		padding-inline: var(--space-outside);
	}

	header {
		padding-top: var(--space-wide);
	}

	.intro > :global(* + *) {
		padding-top: var(--space-medium);
	}

	.panel :global(.blurb) {
		font-family: var(--type-font-display);
		font-size: var(--type-scale-delta);
		line-height: var(--type-leading-default);
	}

	.intro :global(.intro-cta) {
		margin-top: var(--space-wide);
	}

	.toc-link {
		margin-top: auto;
		margin-inline: auto;
		width: var(--content-width-xwide);
		padding-block-end: var(--space-narrow);
	}

	.wrapper {
		margin-inline: auto;
		max-width: var(--content-width-xwide);
	}

	.wrapper.flex {
		max-width: unset;
		width: var(--content-width-xwide);
	}

	.fill-vertical {
		display: flex;
		flex-direction: column;
		flex: 1;
		justify-content: center;
	}
</style>
