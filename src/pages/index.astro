---
// assets
import '@styles/tokens/contentWidth.css';
import '@styles/tokens/spacing.css';
import '@styles/utilities/borders.css';
import '@styles/utilities/type.css';
import arrowDown from '@icons/arrow-down.svg?raw';
import arrowRight from '@icons/arrow-right.svg?raw';

// utils
import { format } from 'date-fns';
import { linkResolver, blogPost } from '@lib/routes';
import * as prismicHelpers from '@prismicio/helpers';
import prismic from '@lib/prismic';

// components
import Layout from '@layouts/BaseLayout.astro';
import Gallery from '@components/layout/Gallery.astro';
import Heading from '@components/blocks/Heading.astro';
import Passage from '@components/blocks/Passage.astro';
import Button from '@components/elements/Button.astro';
import Icon from '@components/elements/Icon.astro';
import Image from '@components/elements/Image.astro';

// types
import { RichTextField } from '@prismicio/types';

interface TOCItem {
	type: string;
	title: string;
	subtitle: string;
	cta: {
		link: string;
		label: string;
	};
	description: {
		prismicText: RichTextField;
	};
}

// fetch content
const response = await prismic.getSingle('homepage');

const {
	headline,
	intro,
	body,
} = response.data;

let introLink = await prismicHelpers.asLink(response.data.intro_link, linkResolver);

const toc = await Promise.all(
	body.map(async ({ slice_type: type, primary, items }) => {
		const link = primary.call_to_action_link
			&& await prismicHelpers.asLink(primary.call_to_action_link, linkResolver);

		const coverImages = (type === 'billboard') && {
			gutter: primary.cover_images_gutter,
			images: items.map((item) => ({
				source: item.cover_image,
				device: item.device,
				relativeSize: item.relative_size,
			})),
		};

		const feedData = primary.content_source && await prismic.getByType('blog_post', {
			orderings: {
				field: 'my.blog_post.date',
				direction: 'desc',
			},
			pageSize: 8,
		});

		const feedItems = feedData?.results.length > 0 && feedData.results.map(({ uid, data }) => ({
			date: data.date,
			path: blogPost({ uid, data }),
			subtitle: data.subtitle && prismicHelpers.asText(data.subtitle),
			title: prismicHelpers.asText(data.title),
			}));

		return {
			type,
			title: prismicHelpers.asText(primary.title || primary.title1),
			subtitle: prismicHelpers.asText(primary.subtitle),
			cta: {
				link,
				label: primary.call_to_action_label,
			},
			description: {
				prismicText: primary.description
			},
			feedItems,
			coverImages,
		};
	})
);
---

<Layout path="home" headerOverlay>

	<!-- intro -->
	<header>
		<div class="wrapper intro">
			<div class="blurb">
				<Heading level={1}>{prismicHelpers.asText(headline)}</Heading>
				<Passage
					text={{ prismicText: intro }}
					typeSize="delta"
					typeFace="display"
					class="blurb"
				/>
				<Button
					class="blurb-cta"
					href={introLink}
					iconRight={arrowRight}
				>
					A bit more about me
				</Button>
			</div>
			<a
				class="type-role-accent type-scale-epsilon type-link-undecorated"
				href="#toc"
			>
				<Icon
					align="baseline"
					margin="right"
					svg={arrowDown}
				/>
				Table of contents
			</a>
		</div>
	</header>

	<!-- TOC panels -->
	<section id="toc">
		{toc.map((item, index) => (
			<article class="toc-item | border-seam-top">
				<div class={`wrapper flex | ${item.type}`}>
					<div class="blurb">
						{/* https://bobbyhadz.com/blog/javascript-pad-number-with-leading-zeros */}
						<Heading level={3} subheading>{String(index + 1).padStart(2, '0')}</Heading>
						<Heading level={1}><a href={item.cta.link}>{item.title}</a></Heading>
						{item.subtitle && (
							<Heading subheading level={3}>{item.subtitle}</Heading>
						)}
						<Passage
							typeSize="delta"
							typeFace="display"
							text={item.description}
						/>
						<Button
							class="blurb-cta"
							href={item.cta.link}
							iconRight={arrowRight}
						>
							{item.cta.label}
						</Button>
					</div>
					{item.type === 'billboard'
						&& item.coverImages?.images?.length > 0
						&& (
							<figure class="billboard-figure">
								{item.coverImages.images.map(({ source }) => (
									source && <Image {source} contain />
								))}
							</figure>
						)
					}
					{item.type === 'feed' && (
						<Gallery gutter="wide" class="feed-list">
							{item.feedItems.map((listing) => (
								<li class="feed-item">
									<Heading level={5} subheading>{format(new Date(listing.date), 'yy.MM')}</Heading>
									<Heading level={3}><a href={listing.path}>{listing.title}</a></Heading>
								</li>
							))}
						</Gallery>
					)}
				</div>
			</article>
		))}
	</section>
</Layout>

<style>
	header {
		display: flex;
		min-height: 100vh;
		padding-block-end: var(--space-narrow);
		padding-block-start: var(--space-wide);
		padding-inline: var(--space-outside);
	}

	header > .intro {
		align-items: center;
		display: grid;
		flex: 1;
		gap: var(--space-medium);
		grid-template-rows: 1fr auto;
	}

	.wrapper {
		margin-inline: auto;
		max-width: var(--content-width-xxwide);
		width: 100%;
	}

	.blurb > :global(* + *) {
		padding-top: var(--space-medium);
	}

	.blurb :global(.blurb-cta) {
		margin-top: var(--space-wide);
	}

	.toc-item {
		min-height: 100vh;
		padding-inline: var(--space-outside);
		padding-block: var(--space-wide);
		display: flex;
		flex-direction: column;
	}

	.billboard {
		display: grid;
		flex: 1;
		grid-template-columns: repeat(auto-fit, minmax(40rem, 1fr));
		gap: var(--space-xwide);
		align-items: center;
	}

	.billboard-figure {
		justify-self: center;
	}

	.billboard-figure > :global(img) {
		max-height: 70vh;
	}

	.feed {
		flex: 1;
		justify-content: center;
	}

	.feed :global(.feed-list) {
		padding-top: var(--space-xwide);
	}

	.feed-item > :global(* + *) {
		padding-top: var(--space-xnarrow);
	}
</style>
