---
// assets
import '@styles/tokens/spacing.css';

// utils
import { linkResolver } from '@lib/routes';
import * as prismicHelpers from '@prismicio/helpers';
import prismic from '@lib/prismic';

// components
import Button from '@components/elements/Button.astro';
import Heading from '@components/blocks/Heading.astro';
import Layout from '@layouts/BaseLayout.astro';
import RenderedText from '@components/elements/RenderedText.astro';

// fetch content
const response = await prismic.getSingle('homepage');

const {
	headline,
	intro,
	body,
} = response.data;

let introLink = await prismicHelpers.asLink(response.data.intro_link, linkResolver);

const toc = await Promise.all(
	body.map(async ({ slice_type: type, primary, items }) => {
		const link = primary.call_to_action_link
			&& await prismicHelpers.asLink(primary.call_to_action_link, linkResolver);

		return {
			type,
			title: prismicHelpers.asText(primary.title || primary.title1),
			subtitle: prismicHelpers.asText(primary.subtitle),
			cta: {
				link,
				label: primary.call_to_action_label,
			},
			description: {
				prismicText: primary.description
			},
			coverImages: {
				gutter: primary.cover_images_gutter,
				images: items,
			}
		};
	})
);
---

<Layout path="home">
	<header>
		<Fragment set:html={prismicHelpers.asHTML(headline)}></Fragment>
		<Fragment set:html={prismicHelpers.asHTML(intro)}></Fragment>
		<Button href={introLink}>A bit more about me</Button>
	</header>
	{toc.map((item) => (
		<article>
			<Heading level={2}>{item.title}</Heading>
			{item.subtitle && (
				<Heading subheading level={3}>{item.subtitle}</Heading>
			)}
			<RenderedText {...item.description} />
			<Button href={item.cta.link}>
				{item.cta.label}
			</Button>
		</article>
	))}
</Layout>
