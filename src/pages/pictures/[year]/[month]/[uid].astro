---
// assets
import '@styles/tokens/color.css';
import '@styles/tokens/type.css';
import '@styles/utilities/borders.css';
import '@styles/utilities/type.css';

// utilities
import { arrayToSentence, removeWidows, sentenceCase } from '@lib/stringHelpers';
import { format } from 'date-fns';
import { picture as permalink } from '@lib/routes';
import * as prismicHelpers from '@prismicio/helpers';
import prismic from '@lib/prismic';

// components
import BlockList from '@components/BlockList.astro';
import Figure from '@components/blocks/Figure.astro';
import Gallery from '@components/layout/Gallery.astro';
import Heading from '@components/blocks/Heading.astro';
import Image from '@components/elements/Image.astro';
import Layout from '@layouts/BaseLayout.astro';

export async function getStaticPaths() {
 	const pictures = await prismic.getAllByType('picture', {
		orderings: {
			field: 'my.picture.date_completed',
			direction: 'desc',
		},
		graphQuery: `
			{
				picture {
					...pictureFields
					series {
						...on picture_series {
							uid
							title
						}
					}
					media {
						medium {
							...on picture_medium {
								...picture_mediumFields
							}
						}
					}
					substrate {
						...on picture_substrate {
							name
						}
					}
					editions {
						...editionsFields
						size {
							...on print_size {
								...print_sizeFields
								print_type {
									...on print_type {
										...print_typeFields
									}
								}
							}
						}
					}
				}
			}
		`,
	});

 	return pictures.map(({ uid, data }, index) => {
		const date = prismicHelpers.asDate(data.date_completed);

		const editions = data.editions.map((edition) => {
			const {
				etsy_link: etsyLink,
				image,
				limit,
				name,
				size,
			} = edition;

			const {
				border,
				short_side: shortSide,
				long_side: longSide,
				print_type: printType,
			} = size.data;

			const dimensions = data.orientation === 'horizontal'
				? [ longSide, shortSide ]
				: [ shortSide, longSide ];

			return {
				etsyLink,
				image,
				limit,
				name,
				info: [
					{
						label: 'Type',
						value: prismicHelpers.asText(printType.data.name),
					},
					{
						label: 'Size',
						value: dimensions.map(side => `${side}"`).join(' x '),
					},
					{
						label: 'Paper size',
						value: dimensions.map(side => `${side + (border * 2)}"`).join(' x '),
					},
				],
			};
		});

		const seriesUID = data.series?.data?.uid;
		const navLinks = pictures.filter((pic) => pic.data.series?.data?.uid === seriesUID && pic.uid !== uid);

 		return {
 			params: {
 				year: format(date, 'yyyy'),
 				month: format(date, 'MM'),
 				uid,
 			},
 			props: {
 				...data,
				editions,
				navLinks,
 			},
 		};
 	});
}

const {
	body,
	cover,
	date_completed: dateCompleted,
	editions,
	height,
	media,
	navLinks,
	series,
	substrate,
	title,
	width,
} = Astro.props;

const date = prismicHelpers.asDate(dateCompleted);

function createMediaString() {
	// convert the list of media to a sentence
	let string = arrayToSentence(
		media.map(({ medium }) => (medium.data.name)),
		{ period: false }
	);

	// add the substrate as a suffix
	if (prismicHelpers.isFilled.link(substrate)) {
		string += ` on ${substrate.data.name.toLowerCase()}`;
	}

	if (width && height) {
		string += `&nbsp;&bull;&nbsp;${width} x ${height}`;
	}

	return string;
}
---

<Layout path="pictures">
	<header>
		<Figure source={cover} fit="cover" />
		<div class="info">
			<Heading level={1} text={title} />
			<time datetime={date.toString()}>{format(new Date(date), 'yyyy')}</time>
			{prismicHelpers.isFilled.group(media) && <p set:html={createMediaString()}></p>}
		</div>
	</header>

	<BlockList {body} />

	<!-- editions -->
	<section class="editions | border-seam-top">
		<Heading level={2}>{removeWidows('Available editions')}</Heading>
		<Gallery
			size="large"
			gutter="wide"
		>
			{editions.map((edition) => (
				<li>
					<Heading level={3}>{removeWidows(`${edition.name} print`)}</Heading>
					<Image source={edition.image} />
					<dl>
						{edition.info.map(({ label, value }) => (
							<dt>{label}</dt>
							<dd>{value}</dd>
						))}
					</dl>
				</li>
			))}
		</Gallery>
	</section>

	<nav class="border-seam-top">
		{prismicHelpers.isFilled.link(series)
			? <Heading level={2}>
					More work from the <strong>{prismicHelpers.asText(series.data.title)}</strong>&nbsp;series
				</Heading>
			: <Heading level={2}>More work</Heading>
		}
		<Gallery>
			{navLinks.map((picture) => (
				<li>
					<Heading level={3}>{prismicHelpers.asText(picture.data.title)}</Heading>
				</li>
			))}
		</Gallery>
	</nav>
</Layout>

<style>
	header {
		margin-block-end: var(--space-wide);
	}

	.editions,
	nav {
		padding: var(--space-wide) var(--space-outside);
		margin-block-start: var(--space-wide);
	}
</style>
