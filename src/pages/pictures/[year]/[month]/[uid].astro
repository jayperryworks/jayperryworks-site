---
// assets
import '@styles/tokens/contentWidth.css';
import '@styles/tokens/type.css';
import '@styles/utilities/borders.css';
import '@styles/utilities/type.css';
import '@styles/utilities/contentWidth.css';
import index from '@icons/index.svg?raw';

// utilities
import prismic from '@lib/prismic';
import * as prismicHelpers from '@prismicio/helpers';
import { arrayToSentence } from '@lib/stringHelpers';
import { format } from 'date-fns';
import { indexPage } from '@lib/routes';
import { pictureDescription } from '@lib/pictureHelpers';

// components
import BlockList from '@components/BlockList.astro';
import Button from '@components/elements/Button.astro';
import ImageFrameWall from '@components/elements/ImageFrameWall.astro';
import Heading from '@components/blocks/Heading.astro';
import MainFooter from '@components/navigation/MainFooter.astro';
import MainNav from '@components/navigation/MainNav.astro';
import PrintEdition from '@components/layout/PrintEdition.astro';
import PictureGallery from '@components/navigation/PictureGallery.astro';

// layout
import Layout from '@layouts/Layout.astro';

// types
import type {
	DateField,
	GroupField,
	ImageField,
	LinkField,
	PrismicDocument,
	PrismicDocumentWithUID,
	SliceZone,
	TitleField,
} from '@prismicio/types';

import type { Edition, PrintType, SEOContent } from '@lib/types';

export async function getStaticPaths() {
	const pictures = await prismic.getAllByType('picture', {
		orderings: {
			field: 'my.picture.date_completed',
			direction: 'desc',
		},
		graphQuery: `
			{
				picture {
					...pictureFields
					series {
						...on picture_series {
							uid
							title
						}
					}
					media {
						medium {
							...on picture_medium {
								...picture_mediumFields
							}
						}
					}
					substrate {
						...on picture_substrate {
							name
						}
					}
					editions {
						...editionsFields
						size {
							...on print_size {
								...print_sizeFields
								print_type {
									...on print_type {
										...print_typeFields
									}
								}
							}
						}
					}
				}
			}
		`,
	});

	return pictures.map(({ uid, data, tags }) => {
		const date = prismicHelpers.asDate(data.date_completed);

		const editions: Edition[] = data.editions.map((edition) => {
			const { etsy_link: etsyLink, image, limit, name, size } = edition;

			const {
				border,
				short_side: shortSide,
				long_side: longSide,
				print_type: printType,
			} = size.data;

			const dimensions =
				data.orientation === 'horizontal'
					? [longSide, shortSide]
					: [shortSide, longSide];

			return {
				etsyLink,
				image,
				limit,
				name,
				type: {
					name: prismicHelpers.asText(printType.data.name).toLowerCase(),
					description: {
						prismicText: printType.data.description,
					},
				},
				info: [
					{
						label: 'Print size',
						value: dimensions.map((side) => `${side}"`).join(' x '),
					},
					{
						label: 'Border',
						value: `${border}"`,
					},
					{
						label: 'Paper size',
						value: dimensions
							.map((side) => `${side + border * 2}"`)
							.join(' x '),
					},
					{
						label: 'Edition limit',
						value: limit ? prismicHelpers.asText(limit) : 'Open',
					},
				],
			};
		});

		const seriesUID = data.series?.data?.uid;
		const seriesPictures = pictures.filter(
			(pic) => pic.data.series?.data?.uid === seriesUID && pic.uid !== uid
		);
		const { width, height } = seriesPictures[0].data.cover.dimensions;

		const nav = {
			title: data.series?.data?.title || undefined,
			aspectRatio: `${width} / ${height}`,
			pictures: seriesPictures,
		};

		return {
			params: {
				year: format(date, 'yyyy'),
				month: format(date, 'MM'),
				uid,
			},
			props: {
				...data,
				editions,
				nav,
				seo: {
					description:
						data.seo_description || pictureDescription({ data, tags }),
					image: data.seo_image?.url || data.cover.url,
					imageAlt: data.seo_image?.alt || data.cover.alt,
					title: data.seo_title || prismicHelpers.asText(data.title),
				},
				// TODO: remove this once edition slices are deleted
				body: data.body.filter(({ slice_type }) => slice_type !== 'edition'),
			},
		};
	});
}

// --- types
interface EditionsByPrintType extends PrintType {
	sizes?: Edition[];
}

export type Nav = {
	title?: TitleField;
	aspectRatio?: string;
	pictures: PrismicDocumentWithUID[];
};

export interface Props {
	cover: ImageField;
	date_completed: DateField;
	nav: Nav;
	body: SliceZone;
	title: TitleField;
	editions?: Edition[];
	height?: number;
	media?: GroupField;
	seo: SEOContent;
	substrate?: LinkField;
	width?: number;
}

const {
	cover,
	date_completed: dateCompleted,
	nav,
	body,
	title,
	editions,
	height,
	media,
	seo,
	substrate,
	width,
} = Astro.props as Props;

const date = prismicHelpers.asDate(dateCompleted);
const substrateName = prismicHelpers.isFilled.link(substrate)
	? substrate.data.name.toLowerCase()
	: 'paper';

// convert a picture's media/substrate data to plain english
function createMediaString() {
	// convert the list of media to a sentence
	let string = arrayToSentence(
		media.map(({ medium }) => medium.data.name.toLowerCase()),
		{ period: false }
	);

	// add the substrate as a suffix
	if (prismicHelpers.isFilled.link(substrate)) {
		string += ` on ${substrateName}`;
	}

	if (width && height) {
		string += `&nbsp;&bull;&nbsp;${width} x ${height}`;
	}

	return string;
}

// sort the editions by print type (giclee, etc.)
const editionsByType: EditionsByPrintType[] = editions.reduce(
	(result, edition) => {
		const currentTypeInResult =
			result.length > 0 &&
			result.find((item) => item.name === edition.type.name);
		if (!currentTypeInResult) {
			result.push({
				...edition.type,
				sizes: [edition],
			});
		} else {
			delete edition.type;
			currentTypeInResult.sizes.push(edition);
		}
		return result;
	},
	[]
);

const type = substrateName.includes('paper') ? 'frame' : 'panel';
const matteThickness = type === 'frame' ? 25 : 1;
const frameThickness = type === 'frame' ? 0.25 : 0.2;
---

<Layout
	overlayNav={true}
	path="pictures"
	theme="mint"
	{seo}
>
	<MainNav segment="pictures" />
	<main>
		<!-- cover -->
		<header class="cover">
			<div class="cover-image">
				<ImageFrameWall
					source={cover as ImageField}
					{frameThickness}
					{matteThickness}
					{type}
				/>
			</div>
			<div class="cover-info | type-scale-epsilon type-role-accent">
				<Heading
					level={1}
					text={title}
					class="cover-info-item title"
				/>
				<time
					class="cover-info-item year"
					datetime={date.toString()}
					>{format(new Date(date), 'yyyy')}</time
				>
				{
					prismicHelpers.isFilled.group(media) && (
						<p
							class="cover-info-item media"
							set:html={createMediaString()}
						/>
					)
				}
			</div>
		</header>

		<!-- back story -->
		{
			prismicHelpers.isFilled.sliceZone(body) && (
				<section
					class="wrapper | border-seam-top"
					id="backstory"
				>
					<Heading
						level={2}
						align="center"
					>
						Back story
					</Heading>
					<BlockList {body} />
				</section>
			)
		}

		<!-- editions -->
		<section
			class="wrapper | border-seam-top"
			id="editions"
		>
			<Heading
				level={2}
				align="center"
			>
				Available editions
			</Heading>

			{editionsByType.map((type) => <PrintEdition {type} />)}
		</section>

		<!-- Footer nav -->
		<nav class="wrapper | border-seam-top">
			<header class="nav-header">
				{
					nav.title ? (
						<Heading
							level={2}
							class="nav-header-title | type-scale-gamma"
						>
							More from the <em>{prismicHelpers.asText(nav.title)}</em>
							&nbsp;series
						</Heading>
					) : (
						<Heading
							level={2}
							class=""
						>
							More work
						</Heading>
					)
				}
				<Button
					href={indexPage({ uid: 'pictures' } as PrismicDocument)}
					iconRight={index}
				>
					See all
				</Button>
			</header>
			<PictureGallery
				aspectRatio={nav.aspectRatio}
				list={nav.pictures as PrismicDocumentWithUID[]}
			/>
		</nav>
	</main>
	<MainFooter />
</Layout>

<style>
	.cover {
		display: grid;
		grid-template-columns: var(--space-outside) 1fr var(--space-outside);
		grid-template-rows:
			var(--space-xwide)
			minmax(60svh, 1fr)
			auto
			var(--space-xwide);
		grid-template-areas:
			'. . .'
			'. image .'
			'. info .'
			'. . .';
		height: calc(100svh - 3.4rem); /* 100% - the main header */
		overflow: hidden;
		position: relative;
	}

	.cover-image {
		align-items: center;
		display: flex;
		grid-area: image;
		height: auto;
		justify-content: center;
		object-fit: contain;
		overflow: hidden;
		width: 100%;
	}

	.cover-info {
		--gap: var(--space-xnarrow);

		align-items: center;
		color: var(--color-secondary);
		display: flex;
		flex-direction: column;
		gap: var(--gap);
		grid-area: info;
		justify-content: center;
		padding-block-start: var(--space-wide);
	}

	.cover :global(.cover-info-item) {
		text-align: center;
		width: 100%;
	}

	.cover :global(.cover-info-item.title) {
		color: var(--color-primary);
		font-size: var(--type-scale-epsilon);
	}

	.cover .cover-info-item.media {
		display: none;
	}

	@media screen and (min-width: 30em) {
		.cover-info {
			flex-direction: row;
			align-items: baseline;
		}

		.cover :global(.cover-info-item) {
			width: auto;
		}

		.cover-info > :global(* + *)::before {
			content: '\2022'; /* bullet */
			display: inline-block;
			padding-inline-end: var(--gap);
			font-weight: bold;
		}
	}

	@media screen and (min-width: 87em) {
		.cover-info-item.media {
			display: inline-block;
		}
	}

	.wrapper {
		display: flex;
		flex-direction: column;
		gap: var(--space-wide);
		padding: var(--space-xwide) var(--space-outside);
	}

	.nav-header {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		flex-wrap: wrap;
		gap: var(--space-xnarrow);
	}

	.nav-header :global(.nav-header-title) {
		flex: 1 1 44rem;
	}
</style>
