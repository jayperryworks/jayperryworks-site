---
// assets
import '@styles/tokens/color.css';
import '@styles/tokens/contentWidth.css';
import '@styles/tokens/type.css';
import '@styles/utilities/borders.css';
import '@styles/utilities/type.css';
import arrowRight from '@icons/arrow-right.svg?raw';
import index from '@icons/index.svg?raw';

// utilities
import { arrayToSentence } from '@lib/stringHelpers';
import { format } from 'date-fns';
import { indexPage } from '@lib/routes';
import * as prismicHelpers from '@prismicio/helpers';
import prismic from '@lib/prismic';

// components
import BlockList from '@components/BlockList.astro';
import Icon from '@components/elements/Icon.astro';
import Image from '@components/elements/Image.astro';
import Heading from '@components/blocks/Heading.astro';
import DataGrid from '@components/layout/DataGrid.astro';
import Gallery from '@components/layout/Gallery.astro';
import PictureGallery from '@components/navigation/PictureGallery.astro';
import Button from '@components/elements/Button.astro';

// layout
import Layout from '@layouts/BaseLayout.astro';

// types
import { PrismicDocumentWithUID, PrismicDocument } from '@prismicio/types';

export async function getStaticPaths() {
 	const pictures = await prismic.getAllByType('picture', {
		orderings: {
			field: 'my.picture.date_completed',
			direction: 'desc',
		},
		graphQuery: `
			{
				picture {
					...pictureFields
					series {
						...on picture_series {
							uid
							title
						}
					}
					media {
						medium {
							...on picture_medium {
								...picture_mediumFields
							}
						}
					}
					substrate {
						...on picture_substrate {
							name
						}
					}
					editions {
						...editionsFields
						size {
							...on print_size {
								...print_sizeFields
								print_type {
									...on print_type {
										...print_typeFields
									}
								}
							}
						}
					}
				}
			}
		`,
	});

 	return pictures.map(({ uid, data }, index) => {
		const date = prismicHelpers.asDate(data.date_completed);

		const editions = data.editions.map((edition) => {
			const {
				etsy_link: etsyLink,
				image,
				limit,
				name,
				size,
			} = edition;

			const {
				border,
				short_side: shortSide,
				long_side: longSide,
				print_type: printType,
			} = size.data;

			const dimensions = data.orientation === 'horizontal'
				? [ longSide, shortSide ]
				: [ shortSide, longSide ];

			return {
				etsyLink,
				image,
				limit,
				name,
				type: prismicHelpers.asText(printType.data.name),
				info: [
					{
						label: 'Type',
						value: prismicHelpers.asText(printType.data.name),
					},
					{
						label: 'Size',
						value: dimensions.map(side => `${side}"`).join(' x '),
					},
					{
						label: 'Paper size',
						value: dimensions.map(side => `${side + (border * 2)}"`).join(' x '),
					},
				],
			};
		});

		const seriesUID = data.series?.data?.uid;
		const seriesPictures = pictures.filter((pic) => (
				pic.data.series?.data?.uid === seriesUID && pic.uid !== uid
			));
		const { width, height } = seriesPictures[0].data.cover.dimensions;

		const nav = {
			title: data.series?.data?.title || undefined,
			aspectRatio: `${width} / ${height}`,
			pictures: seriesPictures,
		};

 		return {
 			params: {
 				year: format(date, 'yyyy'),
 				month: format(date, 'MM'),
 				uid,
 			},
 			props: {
 				...data,
				editions,
				nav,
 			},
 		};
 	});
}

const {
	body,
	cover,
	date_completed: dateCompleted,
	editions,
	height,
	media,
	nav,
	series,
	substrate,
	title,
	width,
} = Astro.props;

const date = prismicHelpers.asDate(dateCompleted);

function createMediaString() {
	// convert the list of media to a sentence
	let string = arrayToSentence(
		media.map(({ medium }) => (medium.data.name)),
		{ period: false }
	);

	// add the substrate as a suffix
	if (prismicHelpers.isFilled.link(substrate)) {
		string += ` on ${substrate.data.name.toLowerCase()}`;
	}

	if (width && height) {
		string += `&nbsp;&bull;&nbsp;${width} x ${height}`;
	}

	return string;
}
---

<Layout path="pictures">
	<header class="cover">
		<Image
			class="cover-image"
			source={cover}
			fit="cover"
		/>
		<div class="cover-info">
			<Heading level={1} text={title} />
			<time datetime={date.toString()}>{format(new Date(date), 'yyyy')}</time>
			{prismicHelpers.isFilled.group(media) && <p set:html={createMediaString()}></p>}
		</div>
	</header>

	<BlockList {body} />

	<!-- editions -->
	<section class="border-seam-top">
		<Heading level={2} align="center">
			Available editions
		</Heading>
		<Gallery
			size="large"
			gutter="wide"
		>
			{editions.map((edition) => (
				<li>
					<figure class="edition">
						<div class="edition-image">
							<Image source={edition.image} />
						</div>
						<figcaption class="edition-info">
							<Heading level={3} class="edition-title">
								<strong>{edition.name}</strong><span> {edition.type.toLowerCase()}&nbsp;print</span>
							</Heading>
							<DataGrid
								data={edition.info}
								gutter="narrow"
								columnWidth={8}
							/>
							<div class="edition-cta">
								<Button
									href={prismicHelpers.asLink(edition.etsyLink)}
									iconRight={arrowRight}
								>
									Buy on <strong>Etsy</strong>
								</Button>
							</div>
						</figcaption>
					</figure>
				</li>
			))}
		</Gallery>
	</section>

	<nav class="border-seam-top">
		<header class="nav-header">
			{nav.title
				? <Heading level={3} class="nav-header-title | type-role-accent">
						More work from the <strong>{prismicHelpers.asText(nav.title)}</strong>&nbsp;series
					</Heading>
				: <Heading level={3} class="nav-header-title | type-role-accent">More work</Heading>
			}
			<a
				class="nav-back-link | type-role-accent type-scale-epsilon type-link-undecorated"
				href={indexPage({ uid: 'pictures' } as PrismicDocument)}
			>
				See all
				<Icon svg={index} margin="left" />
			</a>
		</header>
		<PictureGallery
			aspectRatio={nav.aspectRatio}
			list={nav.pictures as PrismicDocumentWithUID[]}
		/>
	</nav>
</Layout>

<style>
	.cover {
		margin-block-end: var(--space-wide);
		padding: var(--space-wide) var(--space-outside);
		display: grid;
		grid-template-columns: 1fr;
		grid-template-rows: 60vh 1fr;
		grid-template-areas: 'image' 'info';
	}

	.cover :global(.cover-image) {
		width: 100%;
		height: 100%;
	}

	section,
	nav {
		padding: var(--space-wide) var(--space-outside);
		margin-block-start: var(--space-wide);
	}

	:is(nav, section) > :global(* + *) {
		padding-block-start: var(--space-medium);
	}

	.edition {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		gap: var(--space-narrow);
		margin-inline: auto;
		max-width: var(--content-width-default);
	}

	.edition :global(.edition-title) {
		color: var(--color-secondary);
	}

	.edition :global(.edition-title) > strong {
		color: var(--color-primary);
	}

	.edition-image {
		flex: 1 1 31rem;
	}

	.edition-image :global(img) {
		display: block;
	}

	.edition-info {
		display: flex;
		flex-direction: column;
		flex: 1 1 12rem;
		gap: var(--space-narrow);
	}

	.edition-cta {
		margin-block-start: auto;
	}

	.nav-header {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: baseline;
		flex-wrap: wrap;
	}

	.nav-header > :global(.nav-header-title) {
		flex: 1 1 700px;
	}

	.nav-back-link {
		display: inline-block;
	}

	.nav-back-link > :global(*) {
		vertical-align: bottom;
	}
</style>
