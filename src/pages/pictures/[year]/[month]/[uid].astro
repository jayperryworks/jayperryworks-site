---
// assets
import '@styles/tokens/color.css';
import '@styles/tokens/contentWidth.css';
import '@styles/tokens/type.css';
import '@styles/utilities/borders.css';
import '@styles/utilities/type.css';
import arrowRight from '@icons/arrow-right.svg?raw';
import index from '@icons/index.svg?raw';

// utilities
import prismic from '@lib/prismic';
import * as prismicHelpers from '@prismicio/helpers';
import { arrayToSentence } from '@lib/stringHelpers';
import { format } from 'date-fns';
import { indexPage } from '@lib/routes';
import { pictureDescription } from '@lib/pictureHelpers';

// components
import BlockList from '@components/BlockList.astro';
import Button from '@components/elements/Button.astro';
import Passage from '@components/blocks/Passage.astro';
import DataGrid from '@components/layout/DataGrid.astro';
import Gallery from '@components/layout/Gallery.astro';
import Heading from '@components/blocks/Heading.astro';
import Image from '@components/elements/Image.astro';
import PictureFrame from '@components/elements/PictureFrame.astro';
import PictureGallery from '@components/navigation/PictureGallery.astro';
import RevealOnScroll from '@components/layout/RevealOnScroll.astro';

// layout
import Layout from '@layouts/BaseLayout.astro';

// types
import type {
	DateField,
	GroupField,
	ImageField,
	LinkField,
	PrismicDocument,
	PrismicDocumentWithUID,
	RichTextField,
	SliceZone,
	TitleField,
} from '@prismicio/types';

import type { FormattedText, SEOContent } from '@lib/types';

export async function getStaticPaths() {
 	const pictures = await prismic.getAllByType('picture', {
		orderings: {
			field: 'my.picture.date_completed',
			direction: 'desc',
		},
		graphQuery: `
			{
				picture {
					...pictureFields
					series {
						...on picture_series {
							uid
							title
						}
					}
					media {
						medium {
							...on picture_medium {
								...picture_mediumFields
							}
						}
					}
					substrate {
						...on picture_substrate {
							name
						}
					}
					editions {
						...editionsFields
						size {
							...on print_size {
								...print_sizeFields
								print_type {
									...on print_type {
										...print_typeFields
									}
								}
							}
						}
					}
				}
			}
		`,
	});

 	return pictures.map(({ uid, data, tags }) => {
		const date = prismicHelpers.asDate(data.date_completed);

		const editions = data.editions.map((edition) => {
			const {
				etsy_link: etsyLink,
				image,
				limit,
				name,
				size,
			} = edition;

			const {
				border,
				short_side: shortSide,
				long_side: longSide,
				print_type: printType,
			} = size.data;

			const dimensions = data.orientation === 'horizontal'
				? [ longSide, shortSide ]
				: [ shortSide, longSide ];

			return {
				etsyLink,
				image,
				limit,
				name,
				type: {
					name: prismicHelpers.asText(printType.data.name).toLowerCase(),
					description: {
						prismicText: printType.data.description,
					},
				},
				info: [
					{
						label: 'Type',
						value: prismicHelpers.asText(printType.data.name),
					},
					{
						label: 'Size',
						value: dimensions.map(side => `${side}"`).join(' x '),
					},
					{
						label: 'Paper size',
						value: dimensions.map(side => `${side + (border * 2)}"`).join(' x '),
					},
				],
				printNotes: {

				}
			};
		});

		const seriesUID = data.series?.data?.uid;
		const seriesPictures = pictures.filter((pic) => (
				pic.data.series?.data?.uid === seriesUID && pic.uid !== uid
			));
		const { width, height } = seriesPictures[0].data.cover.dimensions;

		const nav = {
			title: data.series?.data?.title || undefined,
			aspectRatio: `${width} / ${height}`,
			pictures: seriesPictures,
		};

 		return {
 			params: {
 				year: format(date, 'yyyy'),
 				month: format(date, 'MM'),
 				uid,
 			},
 			props: {
				...data,
				editions,
				nav,
				seo: {
					description: data.seo_description || pictureDescription({ data, tags }),
					image: data.seo_image?.url || data.cover.url,
					imageAlt: data.seo_image?.alt || data.cover.alt,
					title: data.seo_title || prismicHelpers.asText(data.title),
				},
				// TODO: remove this once edition slices are deleted
				body: data.body.filter(({ slice_type }) => slice_type !== 'edition'),
 			},
 		};
 	});
}

export type EditionInfo = {
	label: string,
	value: string,
};

export type PrintType = {
	name: string,
	description?: FormattedText,
}

export type Edition = {
	etsyLink: LinkField,
	image: ImageField,
	limit: number,
	name: string,
	type: PrintType,
	info: EditionInfo[],
};

export type Nav = {
	title?: TitleField,
	aspectRatio?: string,
	pictures: PrismicDocumentWithUID[],
};

export interface Props {
	cover: ImageField;
	date_completed: DateField;
	nav: Nav;
	body: SliceZone;
	title: TitleField;
	editions?: Edition[];
	height?: number;
	media?: GroupField;
	seo: SEOContent,
	substrate?: LinkField;
	width?: number;
}

const {
	cover,
	date_completed: dateCompleted,
	nav,
	body,
	title,
	editions,
	height,
	media,
	seo,
	substrate,
	width,
} = Astro.props as Props;

const date = prismicHelpers.asDate(dateCompleted);
const substrateName = prismicHelpers.isFilled.link(substrate)
	? substrate.data.name.toLowerCase()
	: 'paper';

function createMediaString() {
	// convert the list of media to a sentence
	let string = arrayToSentence(
		media.map(({ medium }) => (medium.data.name.toLowerCase())),
		{ period: false }
	);

	// add the substrate as a suffix
	if (prismicHelpers.isFilled.link(substrate)) {
		string += ` on ${substrateName}`;
	}

	if (width && height) {
		string += `&nbsp;&bull;&nbsp;${width} x ${height}`;
	}

	return string;
}
---

<Layout
	overlayNav={true}
	path="pictures"
	{seo}
>
	<!-- cover -->
	<RevealOnScroll
		tag="header"
		class="cover"
	>
		<PictureFrame
			source={cover as ImageField}
			class="cover-image"
			type={substrateName.includes('paper') ? 'frame' : 'panel'}
		/>
		<div class="cover-info | type-scale-epsilon type-role-accent">
			<Heading level={1} text={title} class="cover-info-item title" />
			<time class="cover-info-item year" datetime={date.toString()}>{format(new Date(date), 'yyyy')}</time>
			{prismicHelpers.isFilled.group(media) && (
				<p class="cover-info-item media" set:html={createMediaString()}></p>
			)}
		</div>
	</RevealOnScroll>

	<!-- back story -->
	{prismicHelpers.isFilled.sliceZone(body) && (
		<section class="wrapper | border-seam-top" id="backstory">
			<Heading level={2} align="center">Back story</Heading>
			<BlockList {body} />
		</section>
	)}

	<!-- editions -->
	<section class="wrapper | border-seam-top" id="editions">
		<RevealOnScroll>
			<Heading level={2} align="center">
				Available editions
			</Heading>
		</RevealOnScroll>
		<Gallery
			size="large"
			gutter="wide"
		>
			{editions.map((edition) => (
				<RevealOnScroll tag="li">
					<figure class="edition">
						<div class="edition-image">
							<Image source={edition.image} />
						</div>
						<figcaption class="edition-info">
							<Heading level={3} class="edition-title">
								<strong>{edition.name}</strong><span> {edition.type.name}&nbsp;print</span>
							</Heading>
							<DataGrid
								data={edition.info}
								gutter="narrow"
								columnWidth={8}
							/>
							{edition.type.description && (
								<details>
									<summary>
										<Heading level={4} subheading>About {edition.type.name} prints</h3>
									</summary>
									<Passage
										text={edition.type.description}
										typeFace="accent"
										typeSize="zeta"
									/>
								</details>
							)}
							<div class="edition-cta">
								<Button
									href={prismicHelpers.asLink(edition.etsyLink)}
									iconRight={arrowRight}
									target="_blank"
								>
									Buy on <strong>Etsy</strong>
								</Button>
							</div>
						</figcaption>
					</figure>
				</RevealOnScroll>
			))}
		</Gallery>
	</section>

	<nav class="wrapper | border-seam-top">
		<RevealOnScroll
			tag="header"
			class="nav-header"
		>
			{nav.title
				? <Heading level={2} class="nav-header-title | type-scale-gamma">
						More from the <strong>{prismicHelpers.asText(nav.title)}</strong>&nbsp;series
					</Heading>
				: <Heading level={2} class="">More work</Heading>
			}
			<Button
				href={indexPage({ uid: 'pictures' } as PrismicDocument)}
				iconRight={index}
			>
				See all
			</Button>
		</RevealOnScroll>
		<PictureGallery
			aspectRatio={nav.aspectRatio}
			list={nav.pictures as PrismicDocumentWithUID[]}
		/>
	</nav>
</Layout>

<style>
	.cover {
		display: grid;
		grid-template-columns: var(--space-outside) 1fr var(--space-outside);
		/* add a space above the top margin roughly the height of the main nav
				to keep the cover image vertically centered */
		grid-template-rows: 3.125rem var(--space-xwide) minmax(60dvh, 1fr) auto var(--space-wide);
		grid-template-areas:
			'nav-space nav-space nav-space'
			'. . .'
			'. image .'
			'. info .'
			'. . .';
		height: 100vh;
		height: 100svh;
		position: relative;
		justify-content: center;
		align-items: center;
	}

	.cover-nav {
		grid-area: nav;
	}

	.cover-image {
		grid-area: image;
		max-height: 100%;
		margin-inline: auto;
	}

	.cover-info {
		--gap: var(--space-xnarrow);

		display: flex;
		flex-direction: column;
		gap: var(--gap);
		padding-block-start: var(--space-xwide);
		align-items: center;
		justify-content: center;
		grid-area: info;
	}

	.cover-info-item {
		text-align: center;
		width: 100%;
	}

	.cover-info-item.title {
		color: var(--color-primary);
		font-size: var(--type-scale-epsilon);
	}

	.cover-info-item.media {
		display: none;
	}

	@media screen and (min-width: 30em) {
		.cover-info {
			flex-direction: row;
			align-items: baseline;
		}

		.cover-info-item {
			width: auto;
		}

		.cover-info > :global(* + *)::before {
			content: '\2022'; /* bullet */
			display: inline-block;
			padding-inline-end: var(--gap);
			font-weight: bold;
		}
	}

	@media screen and (min-width: 87em) {
		.cover-info-item.media {
			display: inline-block;
		}
	}

	.wrapper {
		padding: var(--space-xwide) var(--space-outside);
	}

	.wrapper > :global(* + *) {
		padding-block-start: var(--space-wide);
	}

	.edition {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		gap: var(--space-medium);
		margin-inline: auto;
		max-width: var(--content-width-wide);
	}

	.edition-title {
		color: var(--color-secondary);
	}

	.edition-title > strong {
		color: var(--color-primary);
		font-style: normal;
		font-weight: 300;
	}

	.edition-image {
		flex-grow: 1;
		flex-shrink: 1;
		flex-basis: 31rem;
	}

	.edition-image :global(img) {
		display: block;
	}

	.edition-info {
		--gap: var(--space-narrow);
		flex-grow: 1;
		flex-shrink: 1;
		flex-basis: 14rem;
	}

	.edition-info > dl {
		padding-block-start: var(--space-narrow);
	}

	.edition-cta {
		padding-block-start: var(--space-medium);
	}

	.nav-header {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		flex-wrap: wrap;
		gap: var(--space-xnarrow);
	}

	.nav-header-title {
		flex: 1 1 44rem;
		color: var(--color-secondary);
	}

	.nav-header-title > strong {
		color: var(--color-primary);
		font-style: normal;
	}

	.nav-back-link {
		display: inline-block;
	}

	.nav-back-link > :global(*) {
		vertical-align: bottom;
	}
</style>
