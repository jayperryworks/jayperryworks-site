---
/**
 * Pictures index page
 * - render all the pictures as thumbnails in grids, sorted by series
 */

// --- assets ---
import '@styles/tokens/borders.css';
import '@styles/tokens/contentWidth.css';
import '@styles/tokens/spacing.css';
import '@styles/utilities/type.css';

// --- utils ---
import * as prismicHelpers from '@prismicio/helpers';
import prismic from '@lib/prismic';

// --- components ---
import Heading from '@components/blocks/Heading.astro';
import Passage from '@components/blocks/Passage.astro';
import ColorTheme from '@components/meta/ColorTheme.astro';
import MainFooter from '@components/navigation/MainFooter.astro';
import MainNav from '@components/navigation/MainNav.astro';
import PictureGallery from '@components/navigation/PictureGallery.astro';
import Layout from '@layouts/Layout.astro';
import { undefined } from 'astro:schema';

// --- config ---
// use this aspect ratio when none is specified for a given series
const DEFAULT_ASPECT_RATIO = '1 / 1';
const DEFAULT_PAGE_THEME = 'mint';

// --- data ---
const pageData = await prismic.getByUID('index_page', 'pictures');

const {
	seo_description,
	seo_image,
	seo_title,
	title,
} = pageData.data;

const seo = {
	description: seo_description,
	image: seo_image?.url,
	imageAlt: seo_image?.alt,
	title: seo_title || prismicHelpers.asText(title),
};

const picturesData = await prismic.getAllByType('picture', {
	orderings: {
		field: 'my.picture.date_completed',
		direction: 'desc',
	},
	graphQuery: `
		{
			picture {
				uid
				date_completed
				series {
					...on picture_series {
						aspect_ratios
						body
						custom_base_hue
						date_started
						description
						grid_column_size
						grid_gutter_width
						matte_color1
						preset_theme
						title
						uid
						wall_color
					}
				}
				substrate {
					...on picture_substrate {
						name
					}
				}
				cover
				title
				featured
			}
		}
	`,
});

// create an array of series from the pictures data
const seriesList = picturesData
	.reduce((result, picture) => {
		const { data: series } = picture.data.series;

		if (!series) return result;

		const {
			aspect_ratios: sameAspectRatio,
			date_started: startDate,
			description,
			grid_column_size: columnSize,
			grid_gutter_width: gutter,
			title,
			uid,
			preset_theme: themeName,
			custom_base_hue: themeHue,
			matte_color1: matteColor,
			wall_color: wallColor,
			body: customTheme,
		} = series;

		if (result.find((s) => s.uid === uid)) return result;

		console.log(uid, matteColor, wallColor);

		result.push({
			// if all the pictures in the series have the same aspect ratio, leave this prop undefined so the grid boxes will be whatever shape the pictures are
			// if not, use the default aspect ratio so the grid boxes will be the same shape and will constrain the different-shaped pictures to equal areas
			aspectRatio: sameAspectRatio ? undefined : DEFAULT_ASPECT_RATIO,
			colors: {
				wall: wallColor || undefined,
				matte: matteColor || undefined,
			},
			theme: {
				name: themeName || undefined,
				hue: themeHue || undefined,
				custom: customTheme || undefined,
			},
			columnSize,
			description,
			gutter,
			startDate,
			title,
			uid,
		});
		return result;
	}, [])
	.sort((a, b) => {
		if (a.startDate > b.startDate) return -1;
		return 1;
	});

// populate the series array with pictures data (for each series)
let picturesBySeries = seriesList.map((group) => ({
	pictures: picturesData.filter((p) => p.data.series.uid === group.uid),
	...group,
}));

// add pictures that aren't in a series last
// -> use default aspect ratio because they all have different aspect ratios
picturesBySeries.push({
	pictures: picturesData.filter((p) => !p.data.series.data),
	aspectRatio: DEFAULT_ASPECT_RATIO,
});

/**
 *
 * @param {ColorRoles} wallColor - the 'wall' (background) color for the series section
 * @returns {string} - inline style attribute with CSS variable definition
 */
function setSeriesWallColor(wallColor) {
	if (wallColor) {
		return `--color-wall: var(--color-${wallColor.toLowerCase()});`;
	}
}
---

<Layout
	pageTitle="Prints & paintings"
	path="pictures"
	theme={DEFAULT_PAGE_THEME}
	{seo}
>
	<MainNav segment="pictures" />
	<main>
		<header class="title">
			<Heading
				level={1}
				text={title}
			/>
		</header>

		{picturesBySeries.map((series) => (
			<ColorTheme
				el="section"
				role="feed"
				class="series"
				id={series.uid || 'other-work'}
				style={setSeriesWallColor(series?.colors?.wall)}
				inherit
				{...series?.theme}
			>
				<header class="series-header">
					<Heading
						level={2}
						class="type-scale-gamma"
						set:html={
							series.title
								? `<em>${prismicHelpers.asText(series.title)}</em> series`
								: 'Other recent work'
						}
					>
					</Heading>

					{series.description && (
						<Passage text={{ markdown: prismicHelpers.asText(series.description) }} />
					)}
				</header>

				<PictureGallery
					list={series.pictures}
					aspectRatio={series.aspectRatio}
					columnSize={series.columnSize?.toLowerCase()}
					gutter={series.gutter?.toLowerCase()}
					matteColor={series.colors?.matte}
				/>
			</ColorTheme>
		))}
	</main>
	<MainFooter />
</Layout>

<style>
	.title,
	.series {
		padding-inline: var(--space-outside);
	}

	.title > :global(h1),
	.series > :global(*) {
		max-width: var(--content-width-xxwide);
		margin-inline: auto;
		width: 100%;
	}

	.title {
		padding-block: var(--space-xwide);
	}

	.series {
		background-color: var(--color-wall, var(--color-surface));
		display: flex;
		flex-direction: column;
		gap: var(--space-wide);
		padding-block-end: var(--space-xwide);
	}

	.series:not(:first-of-type) {
		border-block-start: var(--border-default);
		padding-block-start: var(--space-xwide);
	}

	.series-header {
		display: flex;
		flex-direction: column;
		gap: var(--space-xnarrow);
	}
</style>
