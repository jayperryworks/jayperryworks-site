---
// assets
import '@styles/tokens/contentWidth.css';

// block components
import Aside from '@components/blocks/Aside.astro';
import Billboard from '@components/blocks/Billboard.astro';
import BlockQuote from '@components/blocks/BlockQuote.astro';
import Collage from '@components/blocks/Collage.astro';
import Feed from '@components/blocks/Feed.astro';
import Figure from '@components/blocks/Figure.astro';
import Heading from '@components/blocks/Heading.astro';
import ImageGallery from '@components/blocks/ImageGallery.astro';
import Passage from '@components/blocks/Passage.astro';
import Pullquote from '@components/blocks/Pullquote.astro';
import Table from '@components/blocks/Table.astro';
import Video from '@components/blocks/Video.astro';

// Typescript
import type { Block } from '@lib/types';

export interface Props {
	block: Block;
	class?: string;
}

const {
	block,
	class: className,
} = Astro.props as Props;

function getWidth(prominence) {
	const widths = {
		Small: 'narrow',
		Medium: 'medium',
		Large: 'xwide',
		XLarge: 'xxwide',
		Full: 'full',
	};

	return widths[prominence] || 'medium';
}

const displayModeClass = block.displayMode === 'slide' ? 'slide border-seam-top' : '';

const blocks = {
	aside: Aside,
	billboard: Billboard,
	quote: BlockQuote,
	collage: Collage,
	feed: Feed,
	figure: Figure,
	heading: Heading,
	imageGallery: ImageGallery,
	passage: Passage,
	pullquote: Pullquote,
	table: Table,
	video: Video,
};

const Component = blocks[block.type];

const classList = [
	'block',
	displayModeClass,
	className
].join(' ');
---

<div
	class={classList}
	style={`--block-width: ${getWidth(block.prominence)}`}
>
	<Component {...block} />
</div>

<style>
	/* https://ryanmulligan.dev/blog/layout-breakouts/ */
	.block {
		--gap: var(--space-outside);
		--full: minmax(var(--gap), 1fr);
		/* --xxwide: minmax(0, var(--content-width-xxwide) - var(--content-width-xwide)); */
		/* --xwide: minmax(0, var(--content-width-xwide) - var(--content-width-wide)); */
		/* --wide: minmax(0, var(--content-width-wide) - var(--content-width-default)); */
		--xwide: minmax(0, 7rem);
		--wide: minmax(0, 6rem);
		--medium: minmax(0, (var(--content-width-wide) - var(--content-width-default)) / 2);
		--narrow: min(var(--content-width-narrow), 100% - (var(--gap) * 2));

		display: grid;
		grid-template-columns:
			[full-start] var(--full)
			[xxwide-start] var(--xxwide)
			[xwide-start] var(--xwide)
			[wide-start] var(--wide)
			[medium-start] var(--medium)
			[narrow-start] var(--narrow) [narrow-end]
			var(--medium) [medium-end]
			var(--wide) [wide-end]
			var(--xwide) [xwide-end]
			var(--xxwide) [xxwide-end]
			var(--full) [full-end]
	}

	/* .wrapper {
		max-width: var(--block-width);
		margin-inline: auto;
	} */

	.block > :global(*) {
		grid-column: var(--block-width);
	}
</style>
