---
/**
 * Gallery component
 * - display a list of things in a fluid grid
 *
 * @param {boolean} [alignContentHorizontally]
 * @param {boolean} [alignContentVertically]
 * @param {string} [class] - append classes to the container
 * @param {boolean} [constrainContent] - constrain content to a default width
 * @param {SpaceScale} [gutter] - the space between items
 * @param {GallerySize} [size] - how wide the columns can get
 * @param {boolean} [useFlexBox] - display with flexbox
 */
import '@styles/tokens/contentWidth.css';
import '@styles/tokens/spacing.css';

// types
import type { SpaceScale, GallerySize } from '@lib/types';

const {
	alignContentHorizontally = false,
	alignContentVertically = false,
	class: className = '',
	constrainContent = false,
	gutter = 'xnarrow',
	size = 'medium',
	useFlexBox = false,
} = Astro.props;

const classList = [
	'gallery',
	alignContentHorizontally ? 'center-justify' : '',
	alignContentVertically ? 'center-align' : '',
	className,
	constrainContent ? 'constrain-content' : '',
	size,
	useFlexBox ? 'flex' : '',
]
	.join(' ')
	.trim();
---

<ul
	class={classList}
	style={`--gutter: var(--space-${gutter});`}
>
	<slot>Add list items here</slot>
</ul>

<style>
	.gallery {
		/* default values, can be modified via inline styles on a parent */
		--min-width: 300px;

		display: grid;
		gap: var(--gutter);
		grid-template-columns: 1fr;
		margin-block: 0;
		padding-inline-start: 0;
		position: relative;
	}

	@media screen and (min-width: 30em) {
		.gallery {
			grid-template-columns: repeat(auto-fit, minmax(var(--min-width), 1fr));
		}
	}

	.small {
		--min-width: 180px;
	}

	.large {
		--min-width: 500px;
		grid-template-columns: 1fr;
	}

	@media screen and (min-width: 40em) {
		.large {
			grid-template-columns: repeat(auto-fit, minmax(var(--min-width), 1fr));
		}
	}

	.gallery :global(li) {
		flex-direction: column;
		flex: 1;
		display: flex;
		font-size: 1rem;
		margin: 0; /* overrule default li spacing */
		position: relative;
	}

	.gallery.constrain-content :global(li) {
		max-width: var(--content-width-default);
	}

	.gallery :global(li.wide) {
		grid-column: span 2;
	}

	.gallery :global(li.xwide) {
		grid-column: span 3;
	}

	.large.constrain-content :global(li) {
		max-width: var(--content-width-wide);
	}

	.alignCenter {
		align-items: center;
	}

	.justifyCenter {
		justify-content: center;
	}
</style>
