---
import '@styles/tokens/contentWidth.css';
import '@styles/tokens/spacing.css';

// types
import type { SpaceScale, GallerySize } from '@lib/types';

export interface Props {
	alignContentHorizontally?: boolean;
	alignContentVertically?: boolean;
	class?: string;
	constrainContent?: boolean;
	gutter?: SpaceScale;
	size?: GallerySize;
	useFlexBox?: boolean;
}

const {
	alignContentHorizontally = false,
	alignContentVertically = false,
	constrainContent = false,
	gutter = 'xnarrow',
	size = 'medium',
	useFlexBox = false,
	class: className = '',
} = Astro.props as Props;

const classList = [
	'gallery',
	alignContentHorizontally ? 'center-justify' : '',
	alignContentVertically ? 'center-align' : '',
	className,
	constrainContent ? 'constrain-content' : '',
	size,
	useFlexBox ? 'flex' : '',
].join(' ');
---

<ul
  class={classList}
  style={`--gutter: var(--space-${gutter});`}
>
  <slot>Add list items here</slot>
</ul>

<style>
  .gallery {
    /* default values, can be modified via inline styles on a parent */
    --min-width: 300px;

    display: block;
    font-size: 0;
    margin: -1px;
    margin: calc((var(--gutter) / 2) * -1);
    padding-left: 0;
    position: relative;
    text-align: left;
  }

  @supports (display: grid) and (display: flex) {
    .gallery {
      display: grid;
      gap: var(--gutter);
      grid-template-columns: 1fr;
      margin: 0;
    }

    @media screen and (min-width: 30em) {
      .gallery {
        grid-template-columns: repeat(auto-fit, minmax(var(--min-width), 1fr));
      }
    }
  }

  .small {
    --min-width: 180px;
  }

  .large {
    --min-width: 500px;
    grid-template-columns: 1fr;
  }

  @media screen and (min-width: 40em) {
    .large {
      grid-template-columns: repeat(auto-fit, minmax(var(--min-width), 1fr));
    }
  }

  .gallery :global(li) {
    display: inline-block;
    font-size: 1rem;
    margin: 0; /* overrule default li spacing */
    padding: calc(var(--gutter) / 2);
    position: relative;
    vertical-align: top;
  }

  @supports (display: grid) {
    .gallery :global(li) {
      padding: 0;
    }

    .gallery.constrain-content :global(li) {
      max-width: var(--content-width-default);
    }

    .gallery :global(li.wide) {
      grid-column: span 2;
    }

    .gallery :global(li.xwide) {
      grid-column: span 3;
    }
  }

  .large.constrain-content :global(li) {
    max-width: var(--content-width-wide);
  }

  @supports (display: flex) {
    .flex :global(li) {
      display: flex;
      flex-direction: column;
    }
  }

  .alignCenter {
    align-items: center;
  }

  .justifyCenter {
    justify-content: center;
  }
</style>
