---
// Data Grid component
// Present data (key-value pairs or short strings) in a flowing grid layout

// assets
import '@styles/tokens/color.css';
import '@styles/tokens/spacing.css';
import '@styles/tokens/type.css';
import '@styles/utilities/type.css';

import { titleCase } from '@lib/stringHelpers';

// types
import { SpaceScale } from '@lib/types';

export type DataItem = {
	label: string,
	value: string[],
};

export interface Props {
	data: DataItem[],
	class?: string,
	columnWidth?: number,
	gutter?: SpaceScale,
}

const {
	data,
	class: className,
	columnWidth = 18,
	gutter = 'narrow',
} = Astro.props as Props;
---

<dl
	class={className}
	style={`
		--gutter: var(--space-${gutter});
		--col-size: ${columnWidth}rem;
	`}
>
  {data.map((item) => (
	  <div class="group">
			<dt class="item label">
				<span class="type-font-accent type-weight-light">{item.label}</span>
			</dt>
			{item.value.map((valueItem, index) => (
				<dd class={['item', item.value.length > 1 && 'series'].join(' ')}>
					<span class="type-font-accent type-weight-light">{index === 0 ? (titleCase(valueItem)) : valueItem.toLowerCase()}</span>
				</dd>
			))}
		</div>
	))}
</dl>

<style>
	dl {
	  --type-size: var(--type-scale-zeta);
	  list-style: none;
	  display: block;
	}

	.group {
	  display: block;
	}

	.group + .group {
		margin-top: 1em;
		margin-top: var(--gutter);
	}

	.item {
	  display: block;
	  margin-left: 0; /* reset dt/dd default indent */
		font-size: var(--type-size);
	}

	/* trick from https://codepen.io/ShadowShahriar/pen/LYyvVjo */
	.item.series {
		--separator: ',';
		display: inline;
		padding: 0;
		margin: 0;
	}

	.item.series > span::after {
		white-space: nowrap;
		content: var(--separator) ' ';
		font-size: var(--type-size);
	}

	.item.series:last-of-type > span::after {
		content: '';
	}

	.item.label {
		color: var(--color-secondary);
	}

	.item.label::after {
	  content: ':';
	}

	@media screen and (min-width: 25em) {
		dl {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(var(--col-size), 1fr));
			grid-gap: var(--gutter);
		}

		.group + .group {
			margin-top: 0;
		}
	}
</style>
