---
import { arrayToPunctatedString } from '@lib/stringHelpers';
export interface Props {
	class?: string;
	disabled?: boolean; // turn off animation effect, so this just becomes a div
	duration?: string;
	tag?: string;
	id?: string;
	style?: string;
}

const {
	class: className = '',
	disabled = false,
	duration = '1.6s',
	tag = 'div',
	id = '',
	style,
} = Astro.props as Props;

const El = tag;

const classList = [
	!disabled ? 'reveal' : '',
	className,
].join(' ');

const cssVariables = [
	`--reveal-duration: ${duration};`,
].join(' ');

const styleList = arrayToPunctatedString([
	cssVariables,
	style,
]);
---

<El
	class={classList}
	style={styleList}
	{id}
>
	<slot></slot>
</El>

<script>
	const revealedElements = Array.from(document.querySelectorAll('.reveal'));

	// keep count of how many elements have been revealed
	// so we can stop the script once everything is finished
	let finishedElementsCount = 0;

	if ('IntersectionObserver' in window) {
		const revealObserver = new IntersectionObserver(
			(entries) => {
				// if all the elements have been revealed, disconnect the observer
				if (finishedElementsCount === revealedElements.length) {
					revealObserver.disconnect();
					return;
				}

				// otherwise, continue revealing elements as they become visible
				return entries.forEach((entry) => {
					// if the element is visible, add a class to it
					if (entry.isIntersecting && !entry.target.classList.contains('visible')) {
						entry.target.classList.add('visible');
						finishedElementsCount++;
					}

					// if it's not yet visible, mark it as 'ready' with a class
					// so it will be ready to transition
					if (!entry.isIntersecting) {
						entry.target.classList.add('ready');
					}
				});
			},
		);

		revealedElements.forEach((element) => {
			revealObserver.observe(element);
		})
	}
</script>

<style>
	/* only add these styles if javascript is available */
	:global([data-supports~='js']) .reveal {
		opacity: 0;
	}

	:global([data-supports~='js']) .ready {
		transition: opacity var(--reveal-duration) ease;
	}

	:global([data-supports~='js']) .visible {
		opacity: 1;
	}
</style>
