---
export interface Props {
	class?: string;
	tag?: string;
	duration?: string;
}

const {
	class: className = '',
	tag = 'div',
} = Astro.props as Props;

const El = tag;

const classList = [
	'reveal',
	className,
].join(' ');
---

<El
	class={classList}
	data-reveal
>
	<slot></slot>
</El>

<script>
	const revealedElements = Array.from(document.querySelectorAll('[data-reveal]'));

	if ('IntersectionObserver' in window) {
		const revealObserver = new IntersectionObserver(
			(entries) => entries.forEach((entry) => {
				if (entry.isIntersecting && !entry.target.classList.contains('visible')) {
					entry.target.classList.add('visible');
				}
				if (!entry.isIntersecting) {
					entry.target.classList.add('ready');
				}
			}),
			{
				threshold: 0.25,
			}
		);

		revealedElements.forEach((element) => {
			revealObserver.observe(element);
		})
	}
</script>

<style>
	:global(.js) .reveal {
		opacity: 0;
	}

	:global(.js) .ready {
		transition: opacity 2s ease;
	}

	:global(.js) .visible {
		opacity: 1;
	}
</style>
