---
// assets
import '@styles/tokens/borders.css';
import '@styles/tokens/contentWidth.css';
import '@styles/tokens/spacing.css';
import '@styles/tokens/type.css';

// components
import Block from '@components/Block.astro';

// utils
import blockTypes from '@lib/blocks';
import { reset as resetSidenoteCount } from '@lib/model/sidenotes';

// types
import type { Block as BlockType } from '@lib/types';
import type { SliceZone } from '@prismicio/types';

export interface Props {
	body: SliceZone;
	showLedeStyle?: boolean;
	class?: string;
	numbered?: boolean;
}

const {
	body,
	class: className = '',
	numbered = false,
	showLedeStyle = false,
} = Astro.props as Props;

// reset the global sidenote count to 0
// -> if there are sidenotes on this page, they will be numbered with 1, 2, etc.
resetSidenoteCount();

// assign a class to certain block types to determine spacing between sibling blocks
function getBlockClass(type: string, displayMode: string = 'flow'): string {
	const classes = {
		passage: 'text',
		blockQuote: 'text',
		heading: 'heading',
		aside: 'text',
	};

	if (classes[type]) {
		return `${classes[type]} ${displayMode}`;
	}

	return displayMode;
}

// if the page body has a 'lede' (intro) paragraph,
// add a 'lede' class to the first passage that appears in the list of blocks
function getLedeClass(block: BlockType):string {
	if (showLedeStyle) {
		const firstPassage = sectionList[0].blocks.find((block: BlockType) => {
			return block.type === 'passage';
		});
		return (block === firstPassage) ? 'lede' : '';
	}
}

// --- build an array of blocks, sorted into sections ---
const sectionList = body.reduce((result: Array<any>, slice: Slice) => {
	const {
		slice_type: type,
		primary,
	} = slice;

	const {
		short_title: shortTitle,
		marker,
		uid,
	} = primary;

	// if the block is a section, then add a new section to the array
	if (type === 'section_start') {
		result.push({
			marker,
			shortTitle,
			uid,
			blocks: [],
		});
		return result;
	}

	// if the first blocks are outside a section, then make a generic/empty 'section'
	if (result.length === 0 && type !== 'section_start') {
		result.push({ blocks: [] });
	}

	// add the block object to the last 'section' array item
	// if it matches one of the available types
	if (blockTypes[type]) {
		const section = result[result.length - 1];
		const block = blockTypes[type](slice);
		// if the blocklist or section is marked as numbered, add a number prop to the block
		block.number = (numbered || section.numbered) && (section.blocks.length + 1);

		section.blocks.push(block);
	}
	return result;
}, []);
---


<div class={[
	'block-list',
	className,
].join(' ')}>
	{sectionList.map(({ uid, marker, blocks }) => (
		uid
			? <section
					class={[
						'block-list',
						marker ? 'section-marker' : ''
					].join(' ')}
					id={uid}
				>
					{blocks.map((block) => (
						<Block
							class={[
								getBlockClass(block.type, block.displayMode),
								getLedeClass(block),
							].join(' ')}
							{block}
						/>
					))}
				</section>
			: blocks.map((block) => (
				<Block
					class={[
						getBlockClass(block.type, block.displayMode),
						getLedeClass(block),
					].join(' ')}
					{block}
				/>
			))
	))}
</div>

<style>
	.block-list > :global(* + *) {
		padding-block-start: var(--space-wide);
	}

	/* --- spacing between blocks with different display modes --- */
	.block-list > :global(.flow + .slide) {
		margin-block-start: var(--space-xwide);
	}

	/* --- spacing between different types of blocks --- */
	.block-list :global(.heading + .heading) {
		padding-block-start: var(--space-xnarrow);
	}

	.block-list :global(.heading + .text) {
		padding-block-start: var(--space-narrow);
	}

	/* when two sections of type follow one another, add "invisible" spacing between so they feel like one continuous flow of text */
	.block-list :global(.text + .text) {
		padding-block-start: var(--space-medium);
	}

	/* --- section styling --- */
	.section-marker {
		margin-block-start: var(--space-xwide);
		padding-block-start: var(--space-xwide);
		position: relative;
	}

	.section-marker::before {
		--width: 5ch;

		content: '';
		display: block;
		position: absolute;
		top: 0;
		left: 50%;
		width: var(--width);
		height: 4px;
		background-color: var(--color-secondary);
		margin-inline-start: calc((var(--width) / 2) * -1);
	}

	/* --- 'lede' (intro copy) styling --- */
	:global(.lede p:first-child) {
		font-size: var(--type-scale-delta);
		hyphens: none;
		text-wrap: pretty;
	}
</style>
