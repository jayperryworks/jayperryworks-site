---
// styles
import '@styles/tokens/borders.css';
import '@styles/tokens/elevation.css';
import '@styles/tokens/type.css';

// components
import Icon from '@components/elements/Icon.astro';

interface ToggleIcon {
	default: string;
	toggled?: string;
}

export interface Props {
	href?: string;
	as?: 'a' | 'button';
	class?: string;
	iconLeft?: string | ToggleIcon;
	iconRight?: string | ToggleIcon;
	role?: string;
	size?: string;
	target?: string;
	toggled?: boolean;
}

const {
	as: El = 'a',
	class: className = '',
	href,
	iconLeft = '',
	iconRight = '',
	role = '',
	size = '',
	target,
	toggled = false,
	...attrs
} = Astro.props as Props;

const classList = ['button', role, size, className].filter(Boolean).join(' ');
---

<El
	{href}
	class={classList}
	data-toggled={toggled || undefined}
	target={target || undefined}
	{...attrs}
>
	{
		iconLeft && (
			<Icon
				align="baseline"
				class="icon left default"
				size={size}
				svg={iconLeft?.default || iconLeft}
			/>
		)
	}
	{
		iconLeft.toggled && (
			<Icon
				align="baseline"
				class="icon left toggled"
				size={size}
				svg={iconLeft.toggled}
			/>
		)
	}

	<slot />

	{
		iconRight && (
			<Icon
				align="baseline"
				class="icon right default"
				size={size}
				svg={iconRight}
			/>
		)
	}
	{
		iconRight.toggled && (
			<Icon
				align="baseline"
				class="icon left toggled"
				size={size}
				svg={iconRight.toggled}
			/>
		)
	}
</El>

<style>
	.button {
		--border-width: 0.12em;
		--color-border: var(--color-highlight);
		--color-fill: transparent;
		--shadow-opacity: 0;
		--baseline-compensation: 0.05em;
		--color-label: var(--color-primary, currentColor);
		--font-size: var(--type-scale-epsilon, 1rem);
		--icon-padding-offset: 0.3em;
		--icon-spacing: 0.8em;
		--padding-x: 1.4em;
		--padding-y: 0.88em;

		align-items: center;
		background-color: var(--color-fill);
		border-radius: var(--border-radius);
		border: var(--border-width) solid var(--color-border);
		color: var(--color-label);
		cursor: pointer;
		display: inline-flex;
		font-family: var(--type-font-accent);
		font-size: var(--font-size);
		font-weight: 300;
		gap: 0.3em; /* add a space for elements in the slot, e.g. <strong> */
		line-height: var(--type-leading-xtight);
		overflow: visible;
		padding-block-end: calc(var(--padding-y) - var(--baseline-compensation));
		padding-block-start: var(--padding-y);
		padding-inline: var(--padding-x);
		position: relative;
		text-decoration: none;
		transition: all 0.25s ease;
		z-index: 1;
	}

	/* pre-render a box shadow on a pseudo element, but hide it */
	.button::after {
		border-radius: var(--border-radius);
		box-shadow: var(--elevation-low);
		content: '';
		display: block;
		/* extend outside the container by 95% of the border width so it appears flush */
		inset: calc((var(--border-width) * 0.95) * -1);
		opacity: var(--shadow-opacity);
		position: absolute;
		transition: opacity 0.25s ease-in-out;
		z-index: 0;
	}

	.button:hover,
	.button:active {
		--color-border: oklch(
			from var(--color-highlight) calc(l + 0.1) calc(c - 0.01) h
		);
		--color-fill: oklch(from var(--color-surface) calc(l + 0.03) c h);
		--color-label: oklch(from var(--color-primary) calc(l + 0.1) c h);
		--shadow-opacity: 1;
	}

	.button :global(sup) {
		font-size: 0.6em;
	}

	.button :global(strong) {
		font-weight: bold;
	}

	/* --- sizes --- */
	.small {
		--border-width: 0.1em;
		--font-size: var(--type-scale-zeta);
		--icon-padding-offset: 0.2em;
		--icon-spacing: 0.6em;
		--padding-x: 0.88em;
		--padding-y: 0.42em;

		border-radius: var(--border-radius-sharp);
	}

	.medium {
		--border-width: 0.12em;
		--font-size: var(--type-scale-zeta);
		--icon-padding-offset: 0.3em;
		--icon-spacing: 0.8em;
		--padding-x: 1.4em;
		--padding-y: 0.88em;
	}

	/* --- icons --- */
	.button:has(.icon.left) {
		padding-inline-start: calc(var(--padding-x) - var(--icon-padding-offset));
	}

	.button:has(.icon.right) {
		padding-inline-end: calc(var(--padding-x) - var(--icon-padding-offset));
	}

	.button :global(.icon.left) {
		margin-inline-end: var(--icon-padding-offset);
	}

	.button :global(.icon.right) {
		margin-inline-start: var(--icon-padding-offset);
	}

	/* --- toggled state --- */
	.button[data-toggled] {
		--color-border: oklch(from var(--color-highlight) 55% c h);
		--color-fill: var(--color-border);
		--color-label: var(--color-island);
	}

	.button[data-toggled]:hover,
	.button[data-toggled]:active {
		--color-border: oklch(from var(--color-highlight) 60% c h);
		--color-fill: var(--color-border);
		--color-label: var(--color-island);
	}

	@media (prefers-color-scheme: dark) {
		:global(.has-dark-mode) button[data-toggled] {
			--color-border: oklch(from var(--color-highlight) 80% c h);
			--color-fill: var(--color-border);
			--color-label: var(--color-island);
		}

		:global(.has-dark-mode) button[data-toggled]:hover,
		:global(.has-dark-mode) button[data-toggled]:active {
			--color-border: oklch(from var(--color-highlight) 85% c h);
			--color-fill: var(--color-border);
			--color-label: var(--color-island);
		}
	}

	.button :global(.icon.toggled) {
		display: none;
	}

	.button[data-toggled] :global(.icon.default) {
		display: none;
	}

	.button[data-toggled] :global(.icon.toggled) {
		display: initial;
	}
</style>
