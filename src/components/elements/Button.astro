---
// styles
import '@styles/tokens/color.css';
import '@styles/tokens/type.css';

// components
import Icon from '@components/elements/Icon.astro';

export interface Props {
	href: string;
	class?: string;
	iconLeft?: string;
	iconRight?: string;
	role?: string;
	size?: string;
	target?: string;
}

const {
	href,
	class: className = '',
	iconLeft = '',
	iconRight = '',
	role = '',
	size = '',
	target = '',
} = Astro.props as Props;

const classList = [
	'button',
	iconLeft ? 'has-icon left' : '',
	iconRight ? 'has-icon right' : '',
	role,
	size,
	className,
].join(' ');
---

<a
  {href}
  {target}
  class={classList}
>
  {iconLeft && (
    <Icon
			align="baseline"
      class="icon left"
      size={size}
      svg={iconLeft}
    />
	)}

  <slot></slot>

	{iconRight && (
    <Icon
			align="baseline"
      class="icon right"
      size={size}
      svg={iconRight}
    />
	)}
</a>

<style>
  .button {
    --color: var(--color-primary, currentColor);
		--fill: transparent;
    --font-size: var(--type-scale-epsilon, 1rem);
    --icon-padding-offset: 0.3em;
    --icon-spacing: 0.8em;
    --padding-x: 1.2em;
    --padding-y: 0.88em;
    --shadow-spread: 8px;
    --baseline-compensation: 0.05em;

		align-items: center;
    background-color: var(--fill);
    border-radius: 0.2em;
    border: 0.1rem solid var(--color);
    color: currentColor;
    color: var(--color);
    cursor: pointer;
    display: inline-flex;
    font-family: var(--type-font-accent);
    font-size: var(--font-size);
    font-weight: 300;
		gap: 0.3em; /* add a space for elements in the slot, e.g. <strong> */
		line-height: var(--type-leading-xtight);
		overflow: visible;
		padding-block-end: calc(var(--padding-y) - var(--baseline-compensation));
    padding-block-start: var(--padding-y);
		padding-inline: var(--padding-x);
    position: relative;
		text-decoration: none;
    transition: all 0.25s ease;
		z-index: 1;
  }

  /* pre-render a box shadow on a pseudo element, but hide it */
  .button::before {
    border-radius: 0.2em;
    bottom: 0;
    box-shadow: 0 0 var(--shadow-spread) var(--color-shadow);
    content: '';
    display: block;
    left: 0;
    opacity: 0;
    position: absolute;
    right: 0;
    top: 0;
    transition: opacity 0.25s ease-in-out;
    z-index: 0;
  }

  .button:hover,
  .button:active {
    --color: var(--color-highlight);
  }

  /* show the pseudo element to smoothly animate the shadow */
  .button:hover::before {
    opacity: 1;
  }

  .button :global(sup) {
    font-size: 0.6em;
  }

  .button :global(strong) {
    font-weight: bold;
  }

  /* --- sizes --- */
  .small {
    --font-size: var(--type-scale-zeta);
    --icon-padding-offset: 0.2em;
		--icon-spacing: 0.6em;
		--padding-x: 0.88em;
    --padding-y: 0.42em;
  }

  /* --- icons --- */
  .button.has-icon.left {
    padding-inline-start: calc(var(--padding-x) - var(--icon-padding-offset));
  }

  .button.has-icon.right {
    padding-inline-end: calc(var(--padding-x) - var(--icon-padding-offset));
  }

	.icon.left {
		margin-inline-end: var(--icon-padding-offset);
	}

	.icon.right {
		margin-inline-start: var(--icon-padding-offset);
	}
</style>
