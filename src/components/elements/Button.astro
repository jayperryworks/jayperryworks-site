---
// styles
import '@styles/tokens/borders.css';
import '@styles/tokens/elevation.css';
import '@styles/tokens/type.css';

// components
import Icon from '@components/elements/Icon.astro';

export interface Props {
	href: string;
	class?: string;
	iconLeft?: string;
	iconRight?: string;
	role?: string;
	size?: string;
	target?: string;
}

const {
	href,
	class: className = '',
	iconLeft = '',
	iconRight = '',
	role = '',
	size = '',
	target = '',
} = Astro.props as Props;

const classList = [
	'button',
	iconLeft ? 'has-icon left' : '',
	iconRight ? 'has-icon right' : '',
	role,
	size,
	className,
].join(' ');
---

<a
  {href}
  {target}
  class={classList}
>
  {iconLeft && (
    <Icon
			align="baseline"
      class="icon left"
      size={size}
      svg={iconLeft}
    />
	)}

  <slot></slot>

	{iconRight && (
    <Icon
			align="baseline"
      class="icon right"
      size={size}
      svg={iconRight}
    />
	)}
</a>

<style>
  .button {
		--border-width: 0.12em;
		--color-border: var(--color-highlight);
		--color-fill: transparent;
		--shadow-opacity: 0;
    --baseline-compensation: 0.05em;
    --color-label: var(--color-primary, currentColor);
    --font-size: var(--type-scale-epsilon, 1rem);
    --icon-padding-offset: 0.3em;
    --icon-spacing: 0.8em;
    --padding-x: 1.4em;
    --padding-y: 0.88em;

		align-items: center;
		gap: 0.3em; /* add a space for elements in the slot, e.g. <strong> */
		line-height: var(--type-leading-xtight);
		overflow: visible;
		padding-block-end: calc(var(--padding-y) - var(--baseline-compensation));
		padding-inline: var(--padding-x);
		text-decoration: none;
		z-index: 1;
    background-color: var(--color-fill);
    border-radius: var(--border-radius);
    border: var(--border-width) solid var(--color-border);
    color: var(--color-label);
    cursor: pointer;
    display: inline-flex;
    font-family: var(--type-font-accent);
    font-size: var(--font-size);
    font-weight: 300;
    padding-block-start: var(--padding-y);
    position: relative;
    transition: all 0.25s ease;
  }

  /* pre-render a box shadow on a pseudo element, but hide it */
  .button::after {
		border-radius: var(--border-radius);
    box-shadow: var(--elevation-low);
    content: '';
    display: block;
		/* extend outside the container by 95% of the border width so it appears flush */
    inset: calc((var(--border-width) * 0.95) * -1);
    opacity: var(--shadow-opacity);
    position: absolute;
    transition: opacity 0.25s ease-in-out;
    z-index: 0;
  }

  .button:hover,
  .button:active {
		--color-border: oklch(from var(--color-highlight) calc(l + 0.1) calc(c - 0.01) h);
		--color-fill: oklch( from var(--color-surface) calc(l + 0.03) c h);
		--color-label: oklch(from var(--color-primary) calc(l + 0.1) c h);
		--shadow-opacity: 1;
  }

  .button :global(sup) {
    font-size: 0.6em;
  }

  .button :global(strong) {
    font-weight: bold;
  }

  /* --- sizes --- */
  .small {
		--border-width: 0.1em;
    --font-size: var(--type-scale-zeta);
    --icon-padding-offset: 0.2em;
		--icon-spacing: 0.6em;
		--padding-x: 0.88em;
    --padding-y: 0.42em;

		border-radius: var(--border-radius-sharp);
  }

  /* --- icons --- */
  .button.has-icon.left {
    padding-inline-start: calc(var(--padding-x) - var(--icon-padding-offset));
  }

  .button.has-icon.right {
    padding-inline-end: calc(var(--padding-x) - var(--icon-padding-offset));
  }

	.button :global(.icon.left) {
		margin-inline-end: var(--icon-padding-offset);
	}

	.button :global(.icon.right) {
		margin-inline-start: var(--icon-padding-offset);
	}
</style>
