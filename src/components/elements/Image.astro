---
import type { ImageField } from '@prismicio/types';
import type { ImageFit } from '@lib/types';

/**
 * Responsive image component
 * - renders an img tag with srcset from a Prismic image data object
 * - uses Prismic/Imgix's default auto formatting
 *
 * @param {ImageField} [source] - image source field from Prismic
 * @param {ImageField} [darkModeSource] - image source field from Prismic for dark mode
 * @param {string} [aspectRatio] - specify an aspect ratio - defaults to image's  dimensions
 * @param {boolean} [border] - add a border to the image
 * @param {string} [class] - add classes to the container
 * @param {ImageFit} [fit] - specify a way to crop the image to its frame
 * @param {number} [maxHeight] - maximum height of the image
 * @param {string} [position] - specify the object-position value (goes with fit above)
 * @param {string} [style] - add style attributes to the container
 * @param {number[]} [widths] - responsive widths to add to the srcset
 */

// --- assets ---
import '@styles/tokens/borders.css';

// --- utilities ---
import * as prismicHelpers from '@prismicio/helpers';
import { arrayToPunctatedString } from '@lib/stringHelpers';

// --- props ---
const {
	source,
	aspectRatio,
	border = false,
	class: className = '',
	darkModeSource,
	fit,
	maxHeight,
	position,
	style,
	widths = [800, 1200, 2000],
} = Astro.props;

/**
 * Get the responsive image attributes for a given source field
 * @param {ImageField} imageField - Prismic image data
 * @returns {{ src: string, srcset: string }}
 */
function getSourceAttributes(imageField) {
	return prismicHelpers.asImageWidthSrcSet(imageField, {
		fit: 'max',
		widths,
	});
}

const alt = source.alt;
const { width, height } = source.dimensions;

const sizes = widths
	.map((width) => {
		return `(max-width: ${width}) ${width}px`;
	})
	.join(', ');

// check the source format and background prop to see if the image has transparency
// -> use this to turn off the background 'loading' color
const transparent =
	source.url.includes('.png') && source?.edit?.background === 'transparent';

const classList = [
	'image',
	border ? 'border' : '',
	className,
	fit ? `fit ${fit}` : '',
	maxHeight ? 'limit-height' : '',
	transparent ? 'transparent' : '',
]
	.join(' ')
	.trim();

const styleList = arrayToPunctatedString([
	`--aspect-ratio: ${aspectRatio || `${width}/${height}`};`,
	maxHeight ? `--max-height: ${maxHeight};` : '',
	position ? `--object-position: ${position};` : '',
	style,
]);
---

{
	!prismicHelpers.isFilled.image(darkModeSource) ? (
		// if there's no dark mode version provided, just use a simple img tag
		// - this is a the most common case
		<img
			class={classList}
			style={styleList}
			decoding="async"
			loading="lazy"
			{alt}
			{height}
			{sizes}
			{width}
			{...getSourceAttributes(source)}
		/>
	) : (
		// otherwise, use a picture tag with a media attribute
		// https://larsmagnus.co/blog/how-to-make-images-react-to-light-and-dark-mode
		<picture>
			<source
				srcset={getSourceAttributes(darkModeSource).srcset}
				media="(prefers-color-scheme: dark)"
			/>
			<source srcset={getSourceAttributes(source).srcset} />
			<img
				src={getSourceAttributes(source).src}
				class={classList}
				style={styleList}
				decoding="async"
				loading="lazy"
				{alt}
				{height}
				{style}
				{width}
			/>
		</picture>
	)
}

<style>
	.image {
		aspect-ratio: var(--aspect-ratio);
		background-color: var(--color-well);
		content-visibility: auto;
		display: inline-block;
	}

	.limit-height {
		max-width: 100%;
		max-height: calc(var(--max-height) * 1vh);
		max-height: calc(var(--max-height) * 1svh);
	}

	.transparent {
		background-color: transparent;
	}

	.border {
		border: var(--border-default-width) solid var(--color-border);
	}

	.fit,
	[width][height].fit {
		background-color: transparent;
		object-position: var(--object-position, center);
	}

	.fit.contain {
		object-fit: contain;
	}

	.fit.cover {
		object-fit: cover;
	}
</style>
