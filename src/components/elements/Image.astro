---
// Responsive image
// -> renders an img tag with srcset from a Prismic image data object
// -> uses Prismic/Imgix's default auto formatting

// assets
import '@styles/tokens/borders.css';

// utilities
import * as prismicHelpers from '@prismicio/helpers';
import { arrayToPunctatedString } from '@lib/stringHelpers';

// types
import type { ImageField } from '@prismicio/types';
import type { ImageFit } from '@lib/types';

export interface Props {
	source: ImageField;
	aspectRatio?: string;
	border?: boolean;
	class?: string;
	fit?: ImageFit;
	widths?: Array<number>;
	position?: string;
	style?: string;
}

const {
	source,
	aspectRatio,
	border = false,
	class: className = '',
	fit,
	position,
	widths = [ 800, 1200, 2000 ],
	style,
} = Astro.props as Props;

const { src, srcset } = prismicHelpers.asImageWidthSrcSet(source, {
	fit: 'max',
	widths,
});
const alt = source.alt;
const sizes = widths.map((width) => `(max-width: ${width}) ${width}px`).join(', ');
const { width, height } = source.dimensions;

// check the source format and background prop to see if the image has transparency
// -> use this to turn off the background 'loading' color
const transparent = source.url.includes('.png') && source?.edit?.background === 'transparent';

const classList = [
	'image',
	border ? 'border' : '',
	className,
	fit ? `fit ${fit}` : '',
	transparent ? 'transparent' : '',
].join(' ');

const styleList = arrayToPunctatedString([
	`--aspect-ratio: ${aspectRatio || `${width}/${height} auto`}`,
	position && `--object-position: ${position}`,
	style,
]);
---

<img
	class={classList}
	style={styleList}
	decoding="async"
	loading="lazy"
	{alt}
	{width}
	{height}
	{src}
	{srcset}
	{sizes}
/>

<style>
	.image {
		aspect-ratio: var(--aspect-ratio);
		background-color: var(--color-well);
		content-visibility: auto;
		display: inline-block;
	}

	.transparent {
		background-color: transparent;
	}

	.border {
		border: var(--border-default-width) solid var(--color-border);
	}

	.fit,
	[width][height].fit {
		background-color: transparent;
		object-position: var(--object-position, center);
		width: 100%;
	}

	.fit.contain {
		object-fit: contain;
	}

	.fit.cover {
		object-fit: cover;
	}
</style>
