---
// Responsive image
// -> renders an img tag with srcset from a Prismic image data object
// -> uses Prismic/Imgix's default auto formatting

// assets
import '@styles/tokens/borders.css';

// utilities
import * as prismicHelpers from '@prismicio/helpers';

// types
import type { ImageField } from '@prismicio/types';
import type { ImageFit } from '@lib/types';

export interface Props {
	source: ImageField;
	aspectRatio?: string;
	border?: boolean;
	class?: string;
	fit?: ImageFit;
	widths?: Array<number>;
	position?: string;
}

const {
	source,
	aspectRatio,
	border = false,
	class: className = '',
	fit,
	position,
	widths = [ 800, 1200, 2000 ],
	style,
} = Astro.props as Props;

const { src, srcset } = prismicHelpers.asImageWidthSrcSet(source, {
	fit: 'max',
	widths,
});
const alt = source.alt;

const width = widths[0];
const height = (source.dimensions.height / source.dimensions.width) * widths[0];

const classList = [
	border ? 'border' : '',
	className,
	fit ? `fit ${fit}` : '',
].join(' ');

const styleList = [
	aspectRatio ? `--aspect-ratio: ${aspectRatio};` : '',
	position ? `--object-position: ${position};` : '',
	style
].join(' ');
---

<img
	class={classList}
	style={styleList}
	decoding="async"
	loading="lazy"
	{alt}
	{src}
	{srcset}
	{width}
	{height}
/>

<style>
	img {
		aspect-ratio: var(--aspect-ratio, auto);
		content-visibility: auto;
		display: inline-block;
		max-width: 100%;
		object-position: var(--position, 50% 50%);
	}

	.border {
		border: var(--border-default-width) solid var(--color-border);
	}

	.fit,
	[width][height].fit {
		display: block;
		height: 100%;
		width: 100%;
	}

	.fit.contain {
		object-fit: contain;
	}

	.fit.cover {
		object-fit: cover;
	}
</style>
