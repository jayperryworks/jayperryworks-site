---
// assets
	import '@styles/tokens/color.css';

// utilities
import { arrayToPunctatedString } from '@lib/stringHelpers';

// components
import Image from '@components/elements/Image.astro';

// types
import type { ImageField } from '@prismicio/types';

import type {
	CSSVariable,
	HexColor,
	HSLAColor,
	HSLColor,
} from '@lib/types';

export interface Props {
	source: ImageField,
	class?: string,
	el?: string,
	frameThickness: number,
	matteColor?: CSSVariable | HexColor | HSLColor | HSLAColor,
	matteThickness?: number,
	type?: 'frame' | 'panel',
};

const types = {
	// matte only
	matte: {
		matte: 15,
		border: 0,
	},

	// picture frame
	frame: {
		matte: 20,
		border: 0.25,
	},

	// framed panel/canvas
	panel: {
		matte: 2,
		border: 0.25,
	},
};

const {
	source,
	// put the 'type' prop first because 'frameThickness' and 'matteThickness' use its value for their defaults
	type = 'frame',
	class: className,
	frameThickness = types[type].border,
	matteThickness = types[type].matte,
	matteColor,
	el = 'figure',
} = Astro.props as Props;


const { width, height } = source.dimensions;

const matteAndFrameInPx = ((matteThickness / 100) * width) + (frameThickness * 16);

const aspectRatio = [
	width + matteAndFrameInPx,
	height + matteAndFrameInPx,
].join(' / ');

const El = el;

const classList = [
	'picture',
	type,
	className,
].filter(i => i).join(' ');

const styleList = arrayToPunctatedString([
	`--aspect-ratio: ${aspectRatio}`,
	`--frame-thickness: ${frameThickness}em`,
	`--matte-thickness: ${matteThickness}%`,
	matteColor && `--matte-color: ${matteColor};`,
]);
---

<El
	class={classList}
	style={styleList}
>
	<Image class="image" {source} />
</El>

<style is:global>
	.picture.frame,
	.picture.panel {
		--frame-color: var(--color-primary);
		--shadow-color: var(--color-shadow);
		--matte-color: var(--color-island, #fff);

		align-items: center;
		aspect-ratio: var(--aspect-ratio);
		background-color: var(--matte-color);
		border: var(--frame-thickness) solid var(--frame-color);
		box-shadow: 0 0.25em 0.5em var(--color-shadow);
		display: flex;
		flex-direction: column;
		height: auto;
		justify-content: center;
		margin: 0;
		max-height: 100%;
	}

	.picture.panel {
		box-shadow: 0 0.7em 0.4em var(--color-shadow);
	}

	.picture .image {
		width: calc(100% - var(--matte-thickness));
	}
</style>
