---
// assets
import '@styles/utilities/visibility.css';
import stageIcon from '@icons/stage.svg?raw';

// helpers
import { format } from 'date-fns';

// components
import DevelopmentStageLabel from '@components/elements/DevelopmentStageLabel.astro';

// types
import {
	DevelopmentStageName,
	PublicationDates
} from '@lib/types';

export interface Props {
	date: PublicationDates;
	class?: string,
	showUpdatedDate?: boolean;
	stage?: DevelopmentStageName;
	dateFormat?: string;
}

// default value of `stage` prop is set in the template
// because if a null value is passed in it will override a default here
const {
	date,
	class: className = '',
	dateFormat = 'MMMM dd, yyyy',
	stage,
} = Astro.props as Props;

type formattedDate = {
	posted?: string,
	updated?: string,
	publication?: string,
};

const formattedDate: formattedDate = Object.keys(date).reduce((result, key) => {
	if (date[key]) {
		result[key] = format(date[key], dateFormat);
	}

	return result;
}, {});

const showUpdate = formattedDate.posted !== formattedDate.updated;

const classList = [
	'metadata',
	className,
].join(' ');
---

<dl class={classList}>
	<div class="item">
		<dt class="hide-visually">Development stage:</dt>
		<dd>
			<DevelopmentStageLabel name={stage} />
		</dd>
	</div>
	<div class="item">
		<dt class="hide-visually">Published:</dt>
		<dd>
			<time datetime={date.publication}>{formattedDate.publication}</time>
		</dd>
	</div>
	{showUpdate && (
		<div class="item">
			<dt>Last updated:</dt>
			<dd>
				<time datetime={date.updated}>{formattedDate.updated}</time>
			</dd>
		</div>
	)}
</dl>

<style>
	.metadata {
		--gap: 0.5rem;

		color: var(--color-secondary);
		display: inline-block;
		font-family: var(--type-font-accent);
		font-size: var(--type-scale-zeta);
		font-weight: 300;
		list-style: none;
	}

	.item {
		align-items: center;
		display: flex;
		flex-wrap: wrap;
		gap: 0 calc(var(--gap) / 2);
		justify-content: center;
		position: relative;
	}

	/* @media screen and (min-width: 37em) { */
		.metadata {
			display: inline-flex;
			gap: var(--gap);
			justify-content: center;
			flex-wrap: wrap;
		}

		.item + .item::before {
			content: '\2022';
			display: inline-block;
			font-weight: bold;
			line-height: 0.5;
			margin-inline-end: calc(var(--gap) / 2);
		}
	/* } */
</style>
