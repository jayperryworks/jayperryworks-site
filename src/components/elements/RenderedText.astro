---
// styles
import '@styles/tokens/color.css';
import '@styles/tokens/spacing.css';

// utils
import { linkResolver } from '@lib/routes';
import { sentenceCase } from '@lib/stringHelpers';
import * as prismicHelpers from '@prismicio/helpers';
import renderMarkdown from '@lib/renderMarkdown';

// types
import { RichTextField } from '@prismicio/types';

export interface Props {
	inline?: boolean;
	markdown?: string;
	prismicText?: RichTextField;
}

const {
	markdown,
	prismicText,
	inline = false,
} = Astro.props as Props;

let sidenoteCount = 0;

// Customize the output of Prismic text
function htmlSerializer(type, element, content, children): string {
	if (element.data?.label === 'note') {
		//  remove the parentheses and add a period so it reads as a sentence.
		const label = children.toString().replace('(', '').replace(')', '');

		// add to sidenote count so each gets a unique number
		sidenoteCount += 1;

		return `
			<span class="sidenote">
				<input
					class="sidenote-input"
					id="sidenote-${sidenoteCount}"
					type="checkbox"
				>
					<label
						aria-label="Show the sidenote"
						class="sidenote-label"
						for="${sidenoteCount}"
						tabindex="0"
					>${sidenoteCount}</label>
				</input>
				<small
					class="sidenote-content"
					id="${sidenoteCount}"
				>
					<span class="sidenote-parenthesis">(Note: </span>${sentenceCase(label)}<span class="sidenote-parenthesis">)</span>
				</small>
			</span>
		`;
	}

	return null;
}

let renderedText;

if (prismicHelpers.isFilled.richText(prismicText)) {
	renderedText = prismicHelpers.asHTML(prismicText, linkResolver, htmlSerializer);
}
if (markdown) {
	renderedText = renderMarkdown(markdown, { inline });
}
---

<Fragment set:html={renderedText} />

<style is:global>
	/* sidenotes */
	/* -> https://www.kooslooijesteijn.net/blog/sidenotes-without-js */
	/* -> https://github.com/kslstn/sidenotes/blob/main/style.css */
	.sidenote {
		--size: 0.8em;
		--bg: hsl(var(--color-bg-h), var(--color-bg-s), calc(var(--color-bg-l) + 15%));
		--border: var(--color-border);
		--pointer-margin: var(--space-xnarrow);
		--pointer-size: 0.6em;
		--show: 0;
		--transition-duration: 0.25s;
	}

	.sidenote-input {
		display: none;
	}

	.sidenote-label {
		/* background-color: var(--color-secondary); */
		border-radius: 1000px;
		border: 1px solid var(--color-primary);
		color: var(--color-primary);
		cursor: pointer;
		display: inline-block;
		font-family: var(--type-font-accent);
		font-size: 0.6em;
		line-height: inherit;
		position: relative;
		text-align: center;
		transition: color 0.25s ease, border-color 0.25s ease;
		vertical-align: top;
		padding-inline: 0.5rem;
	}

	.sidenote-label:hover,
	.sidenote-input:checked .sidenote-label {
		border-color: var(--color-highlight);
		color: var(--color-highlight);
	}

	.sidenote-parenthesis {
		position: absolute;
		left: -999999px;
		top: auto;
	}

	.sidenote-content::before {
		display: inline-block;
		content: attr(id) ".";
		color: var(--color-highlight);
		font-family: var(--type-font-accent);
		font-weight: bold;
		margin-right: 0.25em;
	}

	.sidenote-input:checked .sidenote-content {
		--show: 1;
	}
</style>
