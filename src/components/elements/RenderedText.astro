---
// styles
import '@styles/tokens/color.css';
import '@styles/tokens/spacing.css';

// utils
import { linkResolver } from '@lib/routes';
import * as prismicHelpers from '@prismicio/helpers';
import renderMarkdown from '@lib/renderMarkdown';

// types
import type { RichTextField } from '@prismicio/types';

export interface Props {
	htmlSerializer?: Function;
	inline?: boolean;
	markdown?: string;
	prismicText?: RichTextField;
}

const {
	htmlSerializer = null,
	inline = false,
	markdown,
	prismicText,
} = Astro.props as Props;

let renderedText: string;

if (prismicHelpers.isFilled.richText(prismicText)) {
	renderedText = prismicHelpers.asHTML(
		prismicText,
		linkResolver,
		htmlSerializer as prismicHelpers.HTMLFunctionSerializer,
	);
}
if (markdown) {
	renderedText = renderMarkdown(markdown, { inline });
}
---

<Fragment set:html={renderedText} />
