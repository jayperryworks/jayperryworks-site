---
// types
import type { Align } from '@lib/types';

export interface Props {
	align?: Align;
	class?: string;
	id?: string;
	show?: boolean;
}

// props & data
const {
	align = 'center',
	class:className = '',
	id,
	// The tooltip is hidden by default.
	// -> It can be shown by either passing in "true" on this prop...
	// -> or, set the `--show` CSS variable to 1.
	show = false,
} = Astro.props as Props;

const classList = [
	'tooltip',
	`align-${align}`,
	show ? 'show' : '',
	className,
].join(' ');
---

<small
	class={classList}
	{id}
>
	<slot></slot>
</small>

<style>
/* Be sure to add position: relative to the parent element */
.tooltip {
	--bg: var(--color-island);
	--border: var(--color-border);
	--max-width: 18rem;
	--min-width: 10rem;
	--parent-height: 1em;
	--pointer-margin: var(--space-xnarrow);
	--pointer-size: 0.6em;
	--show: 0;
	--transition-duration: 0.25s;

	background-color: var(--bg);
	border-radius: 0.25em;
	border: 1px solid var(--border);
	box-shadow: 0 0.05rem 0.5rem var(--color-shadow);
	color: var(--color-primary);
	content: attr(title);
	display: block;
	font-family: var(--type-font-accent);
	font-size: var(--type-scale-zeta);
	inset-block-end: calc(var(--parent-height) + var(--pointer-size) + 1em);
	line-height: var(--type-leading-tight);
	max-width: var(--max-width);
	min-width: var(--min-width);
	opacity: var(--show, 0);
	padding: var(--space-xnarrow) var(--pointer-margin);
	pointer-events: none;
	position: absolute;
	transition: var(--transition-duration) opacity ease-in-out;
	z-index: 4;
}

.tooltip::before,
.tooltip::after {
	border-inline-end: var(--pointer-size) solid transparent;
	border-inline-start: var(--pointer-size) solid transparent;
	content: "";
	display: inline-block;
	height: 0;
	position: absolute;
	width: 0;
}

.tooltip.align-start {
	inset-inline-start: calc(var(--pointer-margin) * -1);
	text-align: left;
}

.tooltip.align-end {
	inset-inline-end: calc(var(--pointer-margin) * -1);
	text-align: right;
}

.tooltip.align-center {
	inset-inline-start: 50%;
	text-align: center;
	transform: translateX(-50%);
}

.tooltip::before {
	border-block-start: var(--pointer-size) solid var(--border);
	inset-block-end: calc(var(--pointer-size) * -1);
}

.tooltip::after {
	border-block-start: var(--pointer-size) solid var(--bg);
	inset-block-end: calc((var(--pointer-size) - 0.1em) * -1);
}

.tooltip.align-start::before,
.tooltip.align-start::after {
	inset-inline-start: var(--pointer-margin);
}

.tooltip.align-end::before,
.tooltip.align-end::after {
	inset-inline-end: var(--pointer-margin);
}

.tooltip.align-center::before,
.tooltip.align-center::after {
	inset-inline-start: 50%;
	transform: translateX(-50%);
}

.tooltip.align-center {
	inset-inline-start: 50%;
	text-align: center;
	transform: translateX(-50%);
}

.tooltip.show {
	--show: 1;
	pointer-events: all;
}

@media screen and (min-width: 45em) {
	/* widen spacing a little on larger screens, where there's more outside room */
	.tooltip {
		--pointer-margin: var(--space-narrow);
	}
}

@media screen and (min-width: 80em) {
	/* move all tooltips to be centered on large screens */
	.tooltip[class*='align'] {
		inset-inline-start: 50%;
		text-align: center;
		transform: translateX(-50%);
	}

	.tooltip[class*='align']::before,
	.tooltip[class*='align']::after {
		inset-inline-start: 50%;
		transform: translateX(-50%);
	}
}
</style>
