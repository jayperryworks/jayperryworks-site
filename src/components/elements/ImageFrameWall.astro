---
// assets
import '@styles/tokens/elevation.css';

// utilities
import { arrayToPunctatedString } from '@lib/stringHelpers';

// components
import Image from '@components/elements/Image.astro';

// types
import type { ImageField } from '@prismicio/types';

import type {
	CSSVariable,
	HexColor,
	HSLAColor,
	HSLColor,
} from '@lib/types';

export interface Props {
	source: ImageField;
	class?: string;
	el?: string;
	frameThickness: number;
	matteColor?: CSSVariable | HexColor | HSLColor | HSLAColor;
	matteThickness?: number;
	maxHeight: number;
	type?: 'matte' | 'frame' | 'panel';
};

const types = {
	// matte only
	matte: {
		matte: 18,
		border: 0,
	},

	// picture frame
	frame: {
		matte: 20,
		border: 0.25,
	},

	// framed panel/canvas
	panel: {
		matte: 3.5,
		border: 0.25,
	},
};

const {
	source,
	// put the 'type' prop first because 'frameThickness' and 'matteThickness' use its value for their defaults
	type = 'frame',
	class: className,
	frameThickness = types[type].border,
	matteThickness = types[type].matte,
	matteColor,
	maxHeight,
	el = 'figure',
} = Astro.props as Props;


const { width, height } = source.dimensions;

const matteAndFrameInPx = ((matteThickness / 100) * width) + (frameThickness * 16);

const aspectRatio = [
	width + matteAndFrameInPx,
	height + matteAndFrameInPx,
].join(' / ');

const El = el;

const classList = [
	'picture',
	type,
	className,
].filter(i => i).join(' ');

const styleList = arrayToPunctatedString([
	`--aspect-ratio: ${aspectRatio}`,
	`--frame-thickness: ${frameThickness > 0 ? `${frameThickness}em` : 0}`,
	`--matte-thickness: ${matteThickness}%`,
	matteColor && `--matte-color: ${matteColor};`,
]);
---

<El
	class={classList}
	style={styleList}
>
	<Image
		class="image"
		{source}
		{maxHeight}
	/>
</El>

<style is:global>
	.picture.matte,
	.picture.frame,
	.picture.panel {
		/* don't use a global variable for the frame color because it should always be dark black, tinted very slightly to the current key hue */
		--frame-color: oklch(30% 0.008 var(--base-h));
		--shadow-color: var(--color-shadow);

		align-items: center;
		aspect-ratio: var(--aspect-ratio);
		background-color: var(--matte-color);
		border: var(--frame-thickness) solid var(--frame-color);
		display: flex;
		flex-direction: column;
		height: auto;
		justify-content: center;
		margin: 0;
		max-height: 100%;
	}

	.picture.frame {
		--matte-color: var(--color-island);

		box-shadow: var(--elevation-medium);
	}

	.picture.panel {
		/* the 'inset' area of a panel should always be very dark */
		--matte-color: oklch(20% 0.008 var(--base-h));

		box-shadow: var(--elevation-high);
	}

	.picture.matte {
		--matte-color: var(--color-well);
	}

	.picture .image[width][height] {
		width: calc(100% - var(--matte-thickness));
	}

	@media (prefers-color-scheme: dark) {
		.picture.matte,
		.picture.frame,
		.picture.panel {
			--frame-color: oklch(15% 0.008 var(--base-h));
		}

		/* a darker matte feels better with the images against a dark surface */
		.picture.frame {
			--matte-color: var(--color-well);
		}
	}
</style>
