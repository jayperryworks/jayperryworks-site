---
// assets
import '@styles/tokens/borders.css';
import '@styles/tokens/spacing.css';
import '@styles/utilities/type.css';
import arrow from '@icons/arrow-right.svg?raw';

// utils
import { linkResolver } from '@lib/routes';
import * as prismicHelpers from '@prismicio/helpers';

// components
import Heading from '@components/blocks/Heading.astro';
import Button from '@components/elements/Button.astro';
import RenderedText from '@components/elements/RenderedText.astro';

// types
import { LinkField, TitleField } from '@prismicio/types';
import { FormattedText } from '@lib/types';

export interface Action {
	label: string,
	link: LinkField,
};

export interface Props {
	title: TitleField,
	actions?: Action[],
	description?: FormattedText;
	class?: string,
};

const {
	title,
	actions,
	description,
	class: className = ''
} = Astro.props as Props;
---

<aside class={className}>
	<Heading class="type-scale-gamma" text={title} />

	<slot>
		<RenderedText
			allowHTML={true}
			{...description}
		/>
	</slot>

	{actions && (
		<footer>
			{actions.map(({label, link}) => (
				<Button
					iconRight={arrow}
					href={prismicHelpers.asLink(link, linkResolver)}
				>
					{label}
				</Button>
			))}
		</footer>
	)}
</aside>

<style>
	aside {
		--color-bg: var(--color-well);

		display: flex;
		flex-direction: column;
		border-radius: var(--border-radius);
		padding: var(--space-medium);
		background-color: var(--color-well);
	}

	aside > :global(* + *) {
		padding-block-start: var(--space-xnarrow);
	}

	footer {
		display: flex;
		flex-wrap: wrap;
		justify-content: flex-end;
		gap: var(--space-xnarrow);
		padding-block-start: var(--space-medium);
	}
</style>
