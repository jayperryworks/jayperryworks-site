---
// assets
import '@styles/tokens/color.css';
import '@styles/tokens/spacing.css';
import '@styles/tokens/type.css';
import '@styles/tokens/borders.css';
import '@styles/utilities/type.css';
import '@styles/utilities/borders.css';
import arrowRight from '@icons/arrow-right.svg?raw';

// helpers
import { format } from 'date-fns';
import * as prismicHelpers from '@prismicio/helpers';
import prismic from '@lib/prismic';
import { linkResolver, fetchLinks } from '@lib/routes';

// components
import LogoJPW from '@components/logos/LogoJPW.astro';
import Button from '@components/elements/Button.astro';
import Icon from '@components/elements/Icon.astro';
import RevealOnScroll from '@components/layout/RevealOnScroll.astro';

// types
import { mainNavLink } from '@lib/types';
import { LinkField } from '@prismicio/types';

type Item = {
	name: string,
	link: LinkField,
	attributes?: string,
};

const routesResponse = await prismic.getSingle('main_nav', { fetchLinks });
const routes = routesResponse.data.nav_item.reduce(
	(result, item): mainNavLink[] => {
		const { label, link } = item;

		if (label !== 'About') {
			result.push({
				label,
				link: prismicHelpers.asLink(link, linkResolver),
			});
		}
		return result;
	},
	[]
);

const socialChannelsResponse = await prismic.getSingle('social_channels');
const { channel } = socialChannelsResponse.data;


const socialChannelList = channel.map((item: Item) => {
	const { name, link, attributes } = item;

	return `
		<li>
			<a
				class="type-role-accent"
				href="${prismicHelpers.asLink(link)}"
				target="_blank"
				${attributes || ''}
			>
				${name}
			</a>
		</li>
	`.trim();
});

socialChannelList.push(`
	<li>
		<a
		class="type-role-accent"
		href="/rss/feed.xml"
		target="_blank"
		>
			RSS feed
		</a>
	</li>
`);

socialChannelList.join('');
---

<footer class="border-seam-top">
	<RevealOnScroll tag="section" class="about">
		<div class="about-wrapper">
			<img
				class="about-portrait"
				src="https://placehold.it/600x600"
			>
			<div class="about-blurb">
				<p>Hi! My name is Jay. I'm a designer, illustrator, and writer living in Baltimore.</p>
				<Button
					href="/about/"
					iconRight={arrowRight}
				>
					A bit more about me
				</Button>
			</div>
		</div>
	</RevealOnScroll>
	<RevealOnScroll
		class="nav"
		tag="nav"
	>
		<ul
			role="list"
			class="nav-list"
		>
			{routes.map(({ label, link }) => (
				<li>
					<a
						class="type-role-accent"
						href={link}
					>
						{label}
					</a>
				</li>
			))}
		</ul>
	</RevealOnScroll>
	<RevealOnScroll
		tag="section"
		class="social"
	>
		<h2 class="type-scale-gamma">Keep in touch</h2>
		<ul
			class="social-links"
			role="list"
			set:html={socialChannelList}
		>
		</ul>
	</RevealOnScroll>
	<RevealOnScroll
		tag="section"
		class="meta"
	>
		<h2 class="type-scale-gamma">About this site</h2>
		<ul
			class="meta-links"
			role="list"
		>
			<li>
				<a
					class="type-role-accent"
					href="/colophon"
				>
					Colophon
				</a>
			</li>
			<li>
				<a
					class="type-role-accent"
					href="/privacy"
				>
					Privacy
				</a>
			</li>
		</ul>
	</RevealOnScroll>
	<RevealOnScroll
		tag="aside"
		class="signoff"
	>
		<a
			class="logo | type-link-undecorated"
			href="/"
		>
			<LogoJPW />
		</a>
		<small class="copyright | type-role-accent type-scale-zeta">
			&copy; Copyright {format(new Date(), 'yyyy')} Jay Perry Works, all rights reserved.
		</small>
	</RevealOnScroll>
</footer>

<style>
	footer {
		--spacing: var(--space-wide);

		background-color: var(--color-well);
		display: grid;
		flex-shrink: 0;
		row-gap: var(--space-wide);
		grid-template-columns: auto minmax(min-content, var(--content-width-xxwide)) auto;
		grid-template-areas:
		'. about .'
		'. nav .'
		'. social .'
		'. meta .'
		'. signoff .';
		grid-template-rows: repeat(4, auto);
		padding-block: var(--space-xwide) var(--space-medium);
		padding-inline: var(--space-outside);
		position: relative;
	}

	footer > :global(* + *) {
		border-block-start: var(--border-default);
		padding-block-start: var(--spacing);
	}

	.about {
		container-name: about;
		container-type: inline-size;
		grid-area: about;
	}

	.about-blurb {
		align-items: flex-start;
		display: flex;
		flex-direction: column;
		gap: var(--space-narrow);
	}

	.about-portrait {
		aspect-ratio: 1 / 1;
		object-fit: cover;
		max-width: 6rem;
	}

	@container about (min-width: 24em) {
		.about-wrapper {
			display: grid;
			grid-template-columns: auto 1fr;
			grid-template-rows: auto;
			grid-template-areas:
				'portrait blurb';
			gap: var(--space-medium);
		}

		.about-portrait {
			max-width: 8rem;
		}
	}

	@container about (min-width: 34em) {
		.about-portrait {
			max-width: 12rem;
		}
	}

	.nav {
		container-type: inline-size;
		container-name: nav-list;
		grid-area: nav;
	}

	.nav-list {
		padding: 0;
		margin: 0;
	}

	@container nav-list (min-width: 20em) {
		.nav-list {
			display: flex;
			flex-wrap: wrap;
			gap: var(--space-medium);
		}
	}

	.social {
		display: flex;
		flex-direction: column;
		gap: var(--space-xnarrow);
		grid-area: social;
	}

	.social-links {
		display: flex;
		flex-wrap: wrap;
		gap: var(--space-narrow);
		padding: 0;
		margin: 0;
	}

	.meta {
		grid-area: meta;
	}

	.meta-links {
		display: flex;
		flex-wrap: wrap;
		gap: var(--space-narrow);
		padding: 0;
		margin: 0;
	}

	.signoff {
		overflow: hidden;
		display: flex;
		flex-flow: wrap;
		gap: var(--space-narrow);
		align-items: flex-start;
		grid-area: signoff;
	}

	.logo {
		width: 12rem;
	}

	.copyright {
		display: flex;
		color: var(--color-secondary);
		align-items: center;
	}
</style>
