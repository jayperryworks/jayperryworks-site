---
// assets
import '@styles/tokens/color.css';
import '@styles/tokens/spacing.css';
import '@styles/tokens/type.css';
import '@styles/utilities/type.css';
import '@styles/utilities/visibility.css';

// utils
import prismic from '@lib/prismic';
import * as prismicHelpers from '@prismicio/helpers';
import { linkResolver, fetchLinks } from '@lib/routes';

// components
import LogoJP from '@components/logos/LogoJP.astro';

// types
export interface Props {
	segment: string;
	class?: string;
}

type mainNavLink = {
	label: string,
	link: string,
};

const response = await prismic.getSingle('main_nav', { fetchLinks });
const routes = response.data.nav_item.map(
	({ label, link }): mainNavLink => ({
		label,
		link: prismicHelpers.asLink(link, linkResolver),
	})
);

const {
	segment,
	class:className = '',
} = Astro.props as Props;
---

<header class={className}>
	<a
		class="logo"
		href="/"
	>
		<LogoJP />
	</a>

	<!-- nav -->
	<jp-hamburger-nav>
		<nav class="nav-wrapper type-align-right">
			<ul class="nav-list" hidden>
				{routes.map(({ label, link }) => (
					<li>
						<a
							aria-current={link.includes(segment) && 'page'}
							class="nav-item | type-link-undecorated"
							href={link}
						>
							{label}
						</a>
					</li>
				))}
			</ul>
		</nav>
	</jp-hamburger-nav>
</header>

<script is:inline type="module">
	class HamburgerNav extends HTMLElement {
		constructor() {
			super();

			// DOM element references
			this.button = null;
			this.wrapper = null;

			// state
			this.isOpen = false;
		}

		connectedCallback() {
			console.log('hello')
			// render JS-dependent buttons
			this.wrapper = this.querySelector('.nav-wrapper');
			this.wrapper.insertAdjacentHTML('afterbegin', this.renderButton(false));
			this.hideNav();

			// select elements we need to work with
			this.button = this.querySelector('#nav-button-open');
			this.closeButton = this.querySelector('#nav-button-close');

			// event listeners
			this.button.addEventListener('click', () => {
				console.log('open')
				this.open = true;
			});

			this.closeButton.addEventListener('click', () => {
				this.open = false;
			});

			this.wrapper.addEventListener('ontransitionend', () => {
				if (!this.open) this.hideNav();
			});
		}

		set open(state) {
			this.isOpen = state;

			if (state) this.openNav();
			if (!state) this.closeNav();
		}

		get open() {
			return this.open || false;
		}

		openNav() {
			this.wrapper.setAttribute('hidden', 'false');
			this.classList.add('open');
			this.button.setAttribute('aria-expanded', 'true');
		}

		closeNav() {
			this.classList.remove('open');
			this.button.setAttribute('aria-expanded', 'false');
		}

		hideNav() {
			this.wrapper.setAttribute('hidden', 'true');
		}

		renderButton(open = false) {
			const openIcon = `
				<svg class="icon" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
					<path d="M.5 3.5h15M.5 8h8M.5 12.5h12" fill="none" fill-rule="evenodd" stroke-linecap="square" stroke="currentColor"/>
				</svg>
			`;

			const closeIcon = `
				<svg class="icon" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
					<path d="M15.266.734L.734 15.266M.734.734l14.532 14.532" fill="none" fill-rule="evenodd" stroke="currentColor"/>
				</svg>
			`;

			return `
				<button
					aria-expanded="false"
					class="nav-button | type-role-accent type-scale-epsilon"
					id="nav-button-open"
				>
					<span class="hide-visually">Menu</span>
					${open ? openIcon : closeIcon}
					</svg>
				</button>
			`;
		}
	}

	export default customElements.define('jp-hamburger-nav', HamburgerNav);
</script>

<style>
	/* --- layout --- */
	header {
		--transition: 0.25s;

		padding-inline: var(--space-outside);
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
	}

  /* --- nav elements --- */
  .logo {
    border: none;
    display: block;
    max-width: 2.5rem;
  }

  jp-hamburger-nav :global(.nav-button) {
    background-color: transparent;
    border: 0;
    box-shadow: none;
    cursor: pointer;
    display: inline-flex;
		flex-direction: row;
		gap: 0.5em;
		align-items: center;
    outline: none;
    padding: 0;
    transition: color 0.25s ease-in-out;
    will-change: color;
  }

  jp-hamburger-nav :global(.nav-button:hover),
  jp-hamburger-nav :global(.nav-button:active) {
    color: var(--color-highlight);
  }

  jp-hamburger-nav :global(.nav-button.close) {
    margin-inline-end: 1.5em;
    margin-inline-end: var(--space-medium);
    position: absolute;
    right: 0;
    top: 0;
  }

	jp-hamburger-nav :global(.icon) {
		color: currentColor;
    display: inline-block;
    fill: currentColor;
    height: 1em;
    max-height: 100%;
    max-width: 100%;
    pointer-events: none;
    vertical-align: middle;
    width: 1em;
	}

  /* --- small-screen nav --- */
  :global([data-supports~='js']) .nav-wrapper {
		align-items: center;
		display: flex;
		flex-direction: column;
		justify-content: center;
    background-color: hsl(var(--color-bg-h), var(--color-bg-s), var(--color-bg-l), 0.95);
    bottom: 0;
    display: block;
    left: 0;
    opacity: 0;
    position: fixed;
    right: 0;
    top: 0;
    transition: opacity 0.25s ease;
    z-index: 4;
  }

  /* closed (visually hidden) state */
  /* :global([data-supports~='js']) jp-hamburger-nav.closed {
    border: 0;
    clip-path: inset(100%);
    clip: rect(1px, 1px, 1px, 1px);
    height: 1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
  } */

  /* open (transitioned) state */
  :global([data-supports~='js']) jp-hamburger-nav.open .nav-wrapper {
    opacity: 1;
  }

  .nav-list {
    display: inline-block;
    list-style: none;
    margin: 0;
  }

  :global([data-supports~='js']) .nav-list {
    display: block;
  }

  .nav-list > li {
    display: block;
    margin-block-start: 0;
  }

  .nav-list > li + li {
    padding-block-start: var(--space-narrow);
  }

  .nav-item {
    display: inline-block;
    font-size: var(--type-scale-delta);
    position: relative;
    transition: color 0.25s ease-in-out;
    will-change: color, font-size;
		font-family: var(--type-font-accent);
		font-weight: 300;
  }

  .nav-item[aria-current="page"]::before {
    --size: 0.5em;
    background-color: var(--color-highlight);
    border-radius: 1000px;
    content: '';
    display: block;
    height: var(--size);
    left: calc(var(--space-medium) * -1);
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: var(--size);
  }

  /* --- large-screen nav --- */
  @media screen and (min-width: 43em) {
    .nav-button {
      display: none;
    }

    .nav,
    :global([data-supports~='js']) .nav {
      background-color: transparent;
      display: inline-block;
      opacity: 1;
      position: relative;
    }

    :global([data-supports~='js']) .nav.closed {
      clip-path: none;
      clip: auto;
      height: auto;
      overflow: visible;
      position: static;
      width: auto;
    }

    .nav-item {
      font-size: var(--type-scale-zeta);
      padding-block-start: 0.8em;
      padding-block-start: var(--space-xnarrow);
    }

    .nav-item:hover,
    .nav-item:active {
      color: var(--color-highlight);
    }

    .nav-item[aria-current="page"]::before {
      background-color: var(--color-highlight);
      height: 0.18em;
      left: 0;
      position: absolute;
      right: 0;
      bottom: -0.1em;
			top: auto;
      transform: none;
      width: auto;
			border-radius: 0;
    }

    .nav-item.small-only {
      display: none;
    }

    .nav-list > li {
      display: inline-block;
    }

    .nav-list > li + li {
      margin-inline-start: 1em;
      margin-inline-start: var(--space-narrow);
      margin-block-start:  0;
      padding-block-start: 0;
    }
  }
</style>
