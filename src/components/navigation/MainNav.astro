---
// assets
import '@styles/tokens/color.css';
import '@styles/tokens/spacing.css';
import '@styles/tokens/type.css';
import '@styles/utilities/type.css';
import '@styles/utilities/visibility.css';

// utils
import prismic from '@lib/prismic';
import * as prismicHelpers from '@prismicio/helpers';
import { linkResolver, fetchLinks } from '@lib/routes';

// components
import LogoJP from '@components/logos/LogoJP.astro';

// types
import { mainNavLink } from '@lib/types';

export interface Props {
	segment: string;
	class?: string;
}

const response = await prismic.getSingle('main_nav', { fetchLinks });
const routes = response.data.nav_item.map(
	({ label, link }): mainNavLink => ({
		label,
		link: prismicHelpers.asLink(link, linkResolver),
	})
);

const {
	segment,
	class:className = '',
} = Astro.props as Props;

const classList = [
	'main-header',
	className,
].join(' ');
---

<header class={classList}>
	<a
		class="logo"
		href="/"
		rel="me"
	>
		<LogoJP />
	</a>

	<!-- nav -->
	<jp-hamburger-nav>
		<nav class="type-align-right" id="nav-wrapper">
			<ul class="is-hidden" id="nav-list">
				{routes.map(({ label, link }) => (
					<li>
						<a
							aria-current={link.includes(segment) && 'page'}
							class="nav-item | type-link-undecorated"
							href={link}
						>
							{label}
						</a>
					</li>
				))}
			</ul>
		</nav>
	</jp-hamburger-nav>
</header>

<!-- keep this script inline because we need it immediately -->
<script is:inline type="module">
	class HamburgerNav extends HTMLElement {
		constructor() {
			super();

			// DOM element references
			this.button = null;
			this.list = null;

			// state
			this._open = false;

			// config
			this._breakpoint = '(max-width: 43em)';
		}

		connectedCallback() {
			// only run this script if the screen is small enough to need a hamburger menu
			const breakpoint = window.matchMedia(this._breakpoint);

			if (breakpoint.matches) this.render();

			breakpoint.addEventListener('change', () => {
				if (breakpoint.matches) this.render();
			});
		}

		set open(state) {
			this._open = state;
			this.toggleNav();
		}

		get open() {
			return this._open || false;
		}

		toggleNav() {
			this.button.setAttribute('aria-expanded', this.open.toString());
			this.list.classList.toggle('is-open');
			this.list.classList.remove('is-hidden');
			document.body.classList.toggle('has-overlay');
		}

		hideNav() {
			this.list.classList.add('is-hidden');
		}

		renderButton(container) {
			const template = `
				<button
					aria-expanded="false"
					class="nav-button | type-role-accent type-scale-epsilon"
					id="nav-button"
				>
					<span>Menu</span>
					<svg class="icon" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
						<path class="open" d="M.5 3.5h15M.5 8h8M.5 12.5h12" fill="none" fill-rule="evenodd" stroke-linecap="square" stroke="currentColor"/>
						<path class="close" d="M15.266.734L.734 15.266M.734.734l14.532 14.532" fill="none" fill-rule="evenodd" stroke="currentColor"/>
					</svg>
				</button>
			`;

			container.insertAdjacentHTML('afterbegin', template);
		}

		render() {
			// render JS-dependent buttons
			if (!this.button) {
				this.renderButton(this.querySelector('#nav-wrapper'));

				// select elements we need to work with
				this.button = this.querySelector('#nav-button');
				this.list = this.querySelector('#nav-list');

				// hide the nav initially
				this.hideNav();

				// event listeners
				this.button.addEventListener('click', () => {
					this.open = !this.open;
				});

				this.list.addEventListener('transitionend', () => {
					if (!this.open) this.hideNav();
				});
			}
		}
	}

	export default customElements.define('jp-hamburger-nav', HamburgerNav);
</script>

<style>
	/* --- layout --- */
	.main-header {
		--transition: 0.25s;

		padding-inline: var(--space-outside);
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
	}

  /* --- nav elements --- */
  .logo {
    border: none;
    display: block;
    max-width: 2.5rem;
  }

  jp-hamburger-nav :global(.nav-button) {
		align-items: center;
		color: var(--color-primary);
		flex-direction: row;
		gap: 0.5em;
		position: relative;
		z-index: 5;
    background-color: transparent;
    border: 0;
    box-shadow: none;
    cursor: pointer;
    display: inline-flex;
    outline: none;
    padding: 0;
    transition: color 0.25s ease-in-out;
    will-change: color;
  }

  jp-hamburger-nav :global(.nav-button:hover),
  jp-hamburger-nav :global(.nav-button:active) {
    color: var(--color-highlight);
  }

  jp-hamburger-nav :global(.nav-button.close) {
    margin-inline-end: 1.5em;
    margin-inline-end: var(--space-medium);
    position: absolute;
    right: 0;
    top: 0;
  }

	jp-hamburger-nav :global(.icon) {
		color: currentColor;
    display: inline-block;
    fill: currentColor;
    height: 1em;
    max-height: 100%;
    max-width: 100%;
    pointer-events: none;
    vertical-align: middle;
    width: 1em;
	}

	jp-hamburger-nav :global(.icon .open),
	jp-hamburger-nav :global(.icon .close), {
		transition: 0.25s opacity ease;
	}

	jp-hamburger-nav :global([aria-expanded='false'] .close) {
		opacity: 0;
	}

	jp-hamburger-nav :global([aria-expanded='true'] .close) {
		opacity: 1;
	}

	jp-hamburger-nav :global([aria-expanded='true'] .open) {
		opacity: 0;
	}

  /* --- small-screen nav --- */
  #nav-list {
		align-items: center;
    background-color: var(--color-surface);
    bottom: 0;
		display: flex;
		flex-direction: column;
		gap: var(--space-narrow);
		justify-content: center;
    left: 0;
		list-style: none;
		margin: 0;
    opacity: 0;
		overflow-y: scroll;
		padding-block: var(--space-wide);
		padding-inline: var(--space-outside);
    position: fixed;
    right: 0;
    top: 0;
    transition: opacity 0.25s ease;
    z-index: 4;
  }

  /* closed (visually hidden) state */
  #nav-list.is-hidden {
    border: 0;
    clip-path: inset(100%);
    clip: rect(1px, 1px, 1px, 1px);
    height: 1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
  }

  /* open (transitioned) state */
  #nav-list.is-open {
    opacity: 1;
  }

  #nav-list > li {
    display: block;
    margin-block-start: 0;
  }

	/* prevent scrolling on the body when the overlay is displayed */
	:global(.has-overlay) {
		height: 100vh;
		height: 100dvh;
		overflow: hidden;
	}

	/* nav link elements */
  .nav-item {
    display: inline-block;
    font-size: var(--type-scale-delta);
    position: relative;
    transition: color 0.25s ease-in-out;
    will-change: color, font-size;
		font-family: var(--type-font-accent);
		font-weight: 300;
  }

  .nav-item[aria-current="page"] {
		--dot-size: 0.5em;
		--dot-margin: 0.4em;

		margin-inline-start: calc((var(--dot-margin) + var(--dot-size)) * -1);
		display: flex;
		gap: var(--dot-margin);
		align-items: center;
	}

  .nav-item[aria-current="page"]::before {
    background-color: var(--color-highlight);
    border-radius: 1000px;
    content: '';
    display: block;
    height: var(--dot-size);
    width: var(--dot-size);
  }

  /* --- large-screen nav --- */
  @media screen and (min-width: 43em) {
    jp-hamburger-nav :global(.nav-button) {
      display: none;
    }

    #nav-list {
			align-items: flex-start;
			flex-direction: row;
			gap: var(--space-narrow);
      background-color: transparent;
      display: inline-flex;
      opacity: 1;
      position: relative;
    }

    #nav-list.is-hidden {
      clip-path: none;
      clip: auto;
      height: auto;
      overflow: visible;
      position: static;
      width: auto;
    }

    .nav-item {
      font-size: var(--type-scale-zeta);
      padding-block-start: 0.8em;
      padding-block-start: var(--space-xnarrow);
    }

    .nav-item:hover,
    .nav-item:active {
			color: var(--color-highlight);
    }

		.nav-item[aria-current="page"] {
			display: block;
			margin-inline-start: 0;
		}

    .nav-item[aria-current="page"]::before {
			background-color: var(--color-highlight);
			border-radius: 0;
			bottom: -0.1em;
			height: 0.18em;
			left: 0;
			position: absolute;
			right: 0;
			top: auto;
			width: auto;
    }

    .nav-item.small-only {
      display: none;
    }
  }
</style>
