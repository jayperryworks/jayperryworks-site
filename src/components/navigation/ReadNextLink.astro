---
// assets
import '@styles/tokens/spacing.css';
import '@styles/utilities/type.css';
import arrowRight from '@icons/arrow-right.svg?raw';

// components
import Icon from '@components/elements/Icon.astro';

// types
import { Align, TypeScale } from '@lib/types';

export interface Props {
	link: string;
	align?: Align;
	class?: string;
	eyebrowSize?: TypeScale,
	icon?: string;
	titleSize?: TypeScale,
}

const {
	link,
	align = 'start',
	class: className = '',
	eyebrowSize = 'epsilon',
	icon = arrowRight,
	titleSize = 'gamma',
} = Astro.props as Props;

const classList = [
	'read-next',
	`align-${align}`,
	className,
].join(' ');
---

<p class={classList}>
	{Astro.slots.has('eyebrow') && (
		<span class={`eyebrow | type-role-accent type-scale-${eyebrowSize}`}>
			<slot name="eyebrow"></slot>
		</span>
	)}
	<a
		class={`title | type-role-display type-scale-${titleSize} type-link-undecorated`}
		href={link}
	>
		<slot name="title"></slot>
	</a>
	<Icon
		class="icon"
		size="large"
		svg={icon}
	/>
</p>

<style>
	.read-next {
		--gap: var(--space-xxnarrow) var(--space-medium);

		align-items: center;
		gap: var(--gap);
		grid-template-areas:
		'eyebrow .'
		'title icon';
		grid-template-columns: minmax(0, 1fr) auto;
		grid-template-rows: auto;
		padding: 0;
	}

	.read-next.align-start {
		display: inline-grid;
		justify-items: start;
	}

	.read-next.align-end {
		display: grid;
		justify-items: end;
		text-align: end;
	}

	.read-next.align-center {
		display: inline-grid;
		justify-items: center;
		text-align: center;
	}

	.eyebrow {
		color: var(--color-secondary);
		display: inline-block;
		grid-area: eyebrow;
	}

	.title {
		display: block;
		grid-area: title;
		cursor: pointer;
	}

	.read-next :global(.icon) {
		grid-area: icon;
		margin: 0;
		cursor: pointer;
	}
</style>
