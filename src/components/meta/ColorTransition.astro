---
// --- utilities ---
import prismic from '@lib/prismic';
import { setThemeStyle } from '@lib/colorTheme';

// --- props ---
const {
	class: className,
	disabled = false,
	id,
	style,
	tag = 'div',
	name,
	hue,
	link,
} = Astro.props;

const El = tag;

const classList = [
	!disabled ? 'color-transition' : '',
	className || '',
].join(' ');

// --- helper functions ---

/**
 * Get values from the theme props (name, hue, and link)
 * and format them into a string of CSS props to pass to the ColorTheme component
 *
 * @returns {string}
 */
async function getThemeValues() {
	const theme = {
		name,
		hue,
	};

	if (link) {
		const { data } = await prismic.getByID(link);
		theme.custom = data.body1;
	}

	return setThemeStyle(theme);
}
---

<El
	class={classList}
	data-theme={await getThemeValues()}
	{id}
	{style}
>
	<slot></slot>
</El>

<script>
	if ('IntersectionObserver' in window) {
		// the element (usually body) with a color theme applied
		// TODO what if there are multiple?
		const themeElement = document.querySelector('.theme');
		// Reference to the theme that exists when the page loads
		const originalTheme = themeElement.getAttribute('style');

		// all the elements on this page that trigger a color theme transition
		const transitionedElements = Array.from(document.querySelectorAll('.color-transition'));

		const colorTransitionObserver = new IntersectionObserver(
			(entries) => {
				// transition the page color theme as elements become visible
				return entries.forEach((entry) => {
					// if the element is visible, update the .theme element's style property
					if (entry.isIntersecting) {
						const { theme } = entry.target.dataset;

						if (theme) themeElement.setAttribute('style', theme);
					}
				});
			},
			{
				threshold: 0.5,
			}
		);

		transitionedElements.forEach((element) => {
			colorTransitionObserver.observe(element);
		})
	}
</script>

<style is:global>
</style>
