---
/**
 * Color transition meta component
 * - trigger an animated transition in the page's color theme
 * 	 when this element scrolls into view
 *
 * @param {string} [class] - append classes to the container
 * @param {number} [hue] -number of a color theme base hue, 0 - 360
 * @param {string} [id] - ID attribute for the container element
 * @param {string} [link] - ID of a Prismic doc with a theme to use here
 * @param {ThemeNames} [name] - the name of a preset theme, e.g. 'mustard'
 * @param {string} [style] - add CSS rules to the container's style attribute
 * @param {string} [tag='div'] - the HTML tag to use for the container element
 */

// --- utilities ---
import prismic from '@lib/prismic';
import { setThemeStyle } from '@lib/colorTheme';

// --- types ---
import type { ThemeNames } from '@lib/types';

// --- props ---
const {
	class: className,
	hue,
	id,
	link,
	name,
	style,
	tag = 'div',
} = Astro.props;

const El = tag;

const hasTheme = (name || hue || link) && true;

const classList = [
	'color-transition',
	className || '',
].join(' ');

// --- helper functions ---

/**
 * Get values from the theme props (name, hue, and link)
 * and format them into a string of CSS props to pass to the ColorTheme component
 *
 * @returns {string}
 */
async function getThemeValues() {
	/**
	 * @typedef {object} ThemeData
	 * @property {string} name - name of a preset theme
	 * @property {number} hue - number of a base hue
	 * @property {string} custom - CSS variables for a custom theme
	 */

	/** @type {ThemeData} */
	const theme = {
		name,
		hue,
	};

	if (link) {
		const { data } = await prismic.getByID(link);
		theme.custom = data.body1;
	}

	return setThemeStyle(theme);
}
---

<El
	class={classList}
	data-theme={hasTheme && await getThemeValues()}
	{id}
	{style}
>
	<slot></slot>
</El>

<script>
	if ('IntersectionObserver' in window) {
		// the element (usually body) with a color theme applied
		// TODO what if there are multiple?
		const themeElement = document.querySelector('.theme');
		// Reference to the theme that exists when the page loads
		const originalTheme = themeElement.getAttribute('style');

		// all the ColorTransition elements on this page
		const transitionedElements = Array.from(document.querySelectorAll('.color-transition'));
		// all the elements that trigger a color transition
		// - they are only 'active' if they have custom theming
		const transitionedElementsActive = transitionedElements.filter((el) => {
			return el.dataset.theme;
		});

		const colorTransitionObserver = new IntersectionObserver(
			(entries) => {
				// transition the page color theme as elements become visible
				return entries.forEach((entry) => {
					// if the element is visible, update the .theme element's style property
					if (entry.isIntersecting) {
						console.log('intersecting')
						const { theme } = entry.target.dataset;

						if (theme) {
							themeElement.setAttribute('style', theme);
						} else {
							// restore the original page theme
							themeElement.setAttribute('style', originalTheme);
						}
					}
				});
			},
			{
				threshold: 0.5,
			}
		);

		if (transitionedElementsActive.length > 0) {
			transitionedElements.forEach((element) => {
				colorTransitionObserver.observe(element);
			})
		}
	}
</script>
