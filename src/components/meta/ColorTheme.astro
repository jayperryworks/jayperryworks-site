---
/**
 * Color theme component
 * Create color tokens to change the colors of child elements
 *
 * @param {string} [class] - classes to add to the container
 * @param {string} [el=div] - the element to render for the container
 * @param {number} [hue] - custom hue number
 * @param {ThemeNames} [name] - the name of a preset theme
 * @param {Partial<Theme>[]} [custom] - color roles for custom themes
 */

// --- utilities ---
import { oklch, formatCss } from 'culori';

// --- config ---
const defaultHues = {
	cherry: 7,
	mustard: 102,
	mint: 158,
	lavendar: 263,
	anemone: 303,
};

// --- types ---
import { Theme } from '@lib/types';

// --- props ---
const {
	class: className,
	el = 'div',
	name,
	hue,
	custom,
} = Astro.props;

const El = el;

/**
 * Create CSS variables from the data in the theme prop
 *
 * @returns {string[]} - an array of css variable definitions, e.g. --base-h: 100deg;
 */
function setThemeStyle() {
	let styles = [];

	// if a theme name is passed as a prop, assign a default hue to the base-h variable
	if (name) styles.push(`--base-h: ${defaultHues[name]}deg;`);

	// if a hue is passed as a prop, assign it to the base-h variable
	if (hue) styles.push(`--base-h: ${hue}deg;`);

	if (custom) {
		// if custom color roles are passed as a prop, assign role variables for each
		// - that match the tokens in src/styles/tokens/color.css
		for (const object of custom) {
			const { primary: theme } = object;
			const { mode } = theme;
			delete theme.mode;


			for (const role in theme) {
				// if the role value isn't undefined/false
				if (theme[role]) {
					// clean up the field name (messy Prismic data) so it matches a color token
					// - stopgap - hopefully won't need this with the new CMS
					const name = role
						.replaceAll('theme_', '')
						.replaceAll('_foreground', '')
						.replaceAll('_color', '');

					const formattedColor = formatCss({
						mode: 'oklch',
						...oklch(theme[role]),
					});
					// stopgap: make sure the role passed is 'surface'
					// - 'bg' token is deprecated
					styles.push(
						`--custom-${mode.toLowerCase()}-${name}: ${formattedColor};`
					);
				}
			}
		}
	}

	// console.log('ColorTheme styles: ', styles)
	return styles;
}
---

<El
	class={['theme', className || ''].join(' ')}
	style={setThemeStyle().join('')}
>
	<slot></slot>
</El>

<style>
	.theme {
		/*
		* Key hue variable
		* - change this to change the theme
		*/
		--base-h: var(--brand-lavendar-h);

		/*
		* Default theme (light mode)
		* - shades of the base hue
		* - custom color themes define `--brand-[mode]-[role]` variables
		* - if custom variables are not defined, fall back to default OKLCH values
		*/
		--color-highlight: var(--custom-light-highlight, oklch(71% 0.11 var(--base-h)));
		--color-primary: var(--custom-light-primary, oklch(38% 0.008 var(--base-h)));
		--color-secondary: var(--custom-light-secondary, oklch(47% 0.07 var(--base-h)));
		--color-island: var(--custom-light-island, oklch(100% 0 var(--base-h)));
		--color-surface: var(--custom-light-surface, oklch(98% 0.005 var(--base-h)));
		--color-well: var(--custom-light-well, oklch(95% 0.007 var(--base-h)));
		--color-border: var(--custom-light-border, oklch(80% 0.03 var(--base-h)));
		--color-shadow: var(--custom-light-shadow, oklch(42% 0.07 var(--base-h) / 0.2));
	}

	/* Default theme (dark mode) */
	@media (prefers-color-scheme: dark) {
		.theme {
			--color-highlight: var(--custom-dark-highlight, oklch(71% 0.12 var(--base-h)));
			--color-primary: var(--custom-dark-primary, oklch(98% 0.002 var(--base-h)));
			--color-secondary: var(--custom-dark-secondary, oklch(85% 0.05 var(--base-h)));
			--color-island: var(--custom-dark-island, oklch(41% 0.01 var(--base-h)));
			--color-surface: var(--custom-dark-surface, oklch(36% 0.01 var(--base-h)));
			--color-well: var(--custom-dark-well, oklch(31% 0.008 var(--base-h)));
			--color-border: var(--custom-dark-border, oklch(8% 0.06 var(--base-h)));
			--color-shadow: var(--custom-dark-shadow, oklch(5% 0.06 var(--base-h) / 0.2));
		}
	}
</style>
