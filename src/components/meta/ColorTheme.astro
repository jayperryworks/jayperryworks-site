---
import { Theme } from '@lib/types';

/**
 * Color theme component
 * Create color tokens to change the colors of child elements
 *
 * @param {string} [class] - classes to add to the container
 * @param {string} [el=div] - the element to render for the container
 * @param {number} [hue] - custom hue number
 * @param {ThemeNames} [name] - the name of a preset theme
 * @param {Partial<Theme>[]} [custom] - color roles for custom themes
 */

// --- utilities ---
import { oklch, formatCss } from 'culori';

// --- config ---
// some brand colors (hues) that define preset themes
const presetHues = {
	cherry: 7,
	mustard: 102,
	mint: 158,
	lavendar: 263,
	anemone: 303,
};

// use this wherever a theme isn't defined
const DEFAULT_HUE = presetHues.lavendar;

// --- props ---
const {
	class: className,
	el = 'div',
	name,
	hue,
	custom,
} = Astro.props;

const El = el;

/**
 * Render a CSS variable for a given base hue value (OKLCH)
 * @param {number | string} value - an OKLCH hue value, between 0 and 360
 * @returns {string}
 */
function setBaseHue(value) {
	return `--base-h: ${value}deg;`;
}

/**
 * Create CSS variables from the name, hue, and/or custom props
 *
 * @returns {string[]} - an array of css variable definitions, e.g. --base-h: 100deg;
 */
function setThemeStyle() {
	let styles = [];

	// if a theme name is passed as a prop, assign a default hue to the base-h variable
	if (name) styles.push(setBaseHue(presetHues[name]));

	// if a custom hue is passed as a prop, assign it to the base-h variable
	if (hue) styles.push(setBaseHue(hue));

	if (custom) {
		// if custom color roles are passed as a prop, assign role variables for each
		// that match the tokens in the local styles below
		for (const themeData of custom) {
			const { primary: theme } = themeData;
			// Default to "Light" - the CMS may pass null if the field hasn't been modified
			const mode = theme?.mode || 'Light';

			for (const role in theme) {
				// if the role value isn't undefined/false
				if (theme[role] && role !== 'mode') {
					// clean up the field name (messy Prismic data) so it matches a color token
					// - stopgap - hopefully won't need this with the new CMS
					const name = role
						.replaceAll('theme_', '')
						.replaceAll('_foreground', '')
						.replaceAll('_color', '');

					const formattedColor = formatCss({
						mode: 'oklch',
						...oklch(theme[role]),
					});

					styles.push(
						`--custom-${mode.toLowerCase()}-${name}: ${formattedColor};`
					);
				}
			}
		}

		// if no base hue is given, derive one from the first color value
		// available in the custom theme data
		// - this is used to fill in the rest of the theme tokens so they match
		if (!hue) {
			const firstTheme = custom[0].primary;
			delete firstTheme.mode;
			const firstColorValue = Object.values(firstTheme)[0];
			styles.push(setBaseHue(oklch(firstColorValue).h));
		}
	}

	// if all else fails (no props have been passed in), use the default base hue
	if (styles.length === 0) styles.push(setBaseHue(DEFAULT_HUE));

	return styles.join('');
}
---

<El
	class={['theme', className || ''].join(' ')}
	style={setThemeStyle()}
>
	<slot></slot>
</El>

<style>
	.theme {
		/*
		* Default theme tokens (light mode)
		* - Various shades of the base hue
		* - Custom color themes define `--brand-[mode]-[role]` variables
		* - If custom variables are not defined, fall back to default OKLCH values
		*/
		--color-highlight: var(
			--custom-light-highlight,
			oklch(71% 0.11 var(--base-h))
		);
		--color-primary:
			var(--custom-light-primary,
			oklch(38% 0.008 var(--base-h))
		);
		--color-secondary:
			var(--custom-light-secondary,
			oklch(47% 0.07 var(--base-h))
		);
		--color-surface:
			var(--custom-light-surface,
			oklch(98% 0.005 var(--base-h))
		);

		/*
		 * Relative tokens
		 * - Generated from the 'surface' token
		 */
		--color-island:
			var(--custom-light-island,
			oklch(from var(--color-surface) calc(l + 0.04) c h)
		);
		--color-well:
			var(--custom-light-well,
			oklch(from var(--color-surface) calc(l - 0.03) calc(c + 0.001) h)
		);
		--color-border:
			var(--custom-light-border,
			oklch(from var(--color-surface) calc(l - 0.18) c h)
		);
		--color-shadow:
			var(--custom-light-shadow,
			oklch(from var(--color-surface) calc(l - 0.5) c h / 0.2)
		);
	}

	/* Default theme tokens (dark mode) */
	@media (prefers-color-scheme: dark) {
		.theme {
			--color-highlight:
				var(--custom-dark-highlight,
				oklch(71% 0.12 var(--base-h))
			);
			--color-primary:
				var(--custom-dark-primary,
				oklch(98% 0.002 var(--base-h))
			);
			--color-secondary:
				var(--custom-dark-secondary,
				oklch(85% 0.05 var(--base-h))
			);
			--color-surface:
				var(--custom-dark-surface,
				oklch(36% 0.01 var(--base-h))
			);
			--color-island:
				var(--custom-dark-island,
				oklch(from var(--color-surface) calc(l + 0.05) c h)
			);
			--color-well:
				var(--custom-dark-well,
				oklch(from var(--color-surface) calc(l - 0.04) c h)
			);
			--color-border:
				var(--custom-dark-border,
				oklch(from var(--color-surface) calc(l - 0.3) c h)
			);
			--color-shadow:
				var(--custom-dark-shadow,
				oklch(from var(--color-surface) calc(l - 0.5) c h / 0.2)
			);
		}
	}
</style>
