---
/**
 * Color theme component
 * Create color tokens to change the colors of child elements
 *
 * @param {string} [class] - classes to add to the container
 * @param {string} [el=div] - the element to render for the container
 * @param {number} [hue] - custom hue number
 * @param {ThemeNames} [name] - the name of a preset theme
 * @param {Partial<Theme>[]} [custom] - explicit color roles for custom themes
 * @param {boolean} [inherit] - should this element inherit theme values from its parent?
 * @param {string} [style] - inline styles to append to the container
 */

//  --- types ---
import type { Theme, ThemeNames } from '@lib/types';

// --- utilities ---
import { setThemeStyle, hasDarkMode } from '@lib/colorTheme';

// --- props ---
const {
	class: className,
	el = 'div',
	name,
	hue,
	custom,
	inherit,
	style,
	...props
} = Astro.props;

const El = el;

const classList = [
	'theme',
	hasDarkMode() ? 'has-dark-mode' : '',
	className || '',
].join(' ');
---

<El
	class={classList}
	style={[setThemeStyle({ name, hue, custom }), style || ''].join('')}
	{...props}
>
	<slot />
</El>

<style>
	.theme {
		/*
		* Default theme tokens (light mode)
		* - Various shades of the base hue
		* - Custom color themes define `--brand-[mode]-[role]` variables
		* - If custom variables are not defined, fall back to default OKLCH values
		*/
		--color-highlight: var(
			--custom-light-highlight,
			oklch(71% 0.11 var(--base-h))
		);
		--color-primary: var(
			--custom-light-primary,
			oklch(38% 0.008 var(--base-h))
		);
		--color-surface: var(
			--custom-light-surface,
			oklch(98% 0.005 var(--base-h))
		);

		/*
		 * Relative tokens
		 * - Generated from the 'surface' token
		 */
		--color-secondary: var(
			--custom-light-secondary,
			oklch(from var(--color-surface) 47% 0.07 h)
		);

		--color-island: var(
			--custom-light-island,
			oklch(from var(--color-surface) calc(l + 0.04) c h)
		);
		--color-well: var(
			--custom-light-well,
			oklch(from var(--color-surface) calc(l - 0.03) calc(c + 0.001) h)
		);
		--color-border: var(
			--custom-light-border,
			oklch(from var(--color-surface) calc(l - 0.18) c h)
		);
		--color-shadow: var(
			--custom-light-shadow,
			oklch(from var(--color-surface) calc(l - 0.5) c h / 0.2)
		);

		/* Color transition duration token */
		--color-transition: 0.75s;

		transition-duration: var(--color-transition);
		transition-property: color, background-color, border-color;
		transition-timing-function: ease-in-out;
	}

	/* Default theme tokens (dark mode) */
	@media (prefers-color-scheme: dark) {
		.has-dark-mode {
			--color-highlight: var(
				--custom-dark-highlight,
				oklch(71% 0.12 var(--base-h))
			);
			--color-primary: var(
				--custom-dark-primary,
				oklch(98% 0.002 var(--base-h))
			);
			--color-surface: var(
				--custom-dark-surface,
				oklch(36% 0.01 var(--base-h))
			);
			--color-secondary: var(
				--custom-dark-secondary,
				oklch(from var(--color-surface) 85% 0.05 h)
			);
			--color-island: var(
				--custom-dark-island,
				oklch(from var(--color-surface) calc(l + 0.05) c h)
			);
			--color-well: var(
				--custom-dark-well,
				oklch(from var(--color-surface) calc(l - 0.04) c h)
			);
			--color-border: var(
				--custom-dark-border,
				oklch(from var(--color-surface) calc(l - 0.3) c h)
			);
			--color-shadow: var(
				--custom-dark-shadow,
				oklch(from var(--color-surface) calc(l - 0.5) c h / 0.2)
			);
		}
	}
</style>
