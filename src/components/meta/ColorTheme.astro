---
// Color theme component
// - Create color tokens to change the colors of child elements

// --- utilities ---
import { oklch, formatCss } from 'culori';

// --- config ---
const defaultHues = {
	cherry: 7,
	mustard: 12,
	mint: 18,
	lavendar: 23,
	anemone: 33,
};

// --- types ---
import { ColorRoles, CSSVariable, HexColor } from '@lib/types';

export type Theme = {
	[key in ColorRoles]: HexColor | CSSVariable;
} & {
	hue?: number;
	name?: string;
};

export interface Props {
	class?: string;
	el?: string;
	theme?: Partial<Theme>;
}

// --- props ---
const {
	class: className,
	el = 'div',
	theme,
} = Astro.props as Props;

const El = el;

function setThemeStyle(): string[] {
	let styles = [];

	if (theme) {
		// if a theme name is included, assign a default hue to the base-h variable
		if (theme.name) styles.push(`--base-h: ${defaultHues[theme.name]}deg;`);

		// if a hue is included, assign it to the base-h variable
		if (theme.hue) styles.push(`--base-h: ${theme.hue}deg;`);

		// if custom color roles are included, assign role variables for each
		// - that match the tokens in src/styles/tokens/color.css
		for (const role in theme) {
			const formattedColor = formatCss({
				mode: 'oklch',
				...oklch(theme[role]),
			});
			// stopgap: make sure the role passed is 'surface'
			// - 'bg' token is deprecated
			styles.push(
				`--color-${role !== 'bg' ? role : 'surface'}: ${formattedColor};`
			);
		}
	}

	return styles;
}
---

<El
	class={['theme', className || ''].join(' ')}
	style={setThemeStyle().join('')}
>
	<slot></slot>
</El>

<style>
	.theme {
		/*
		* Key hue variable
		* - change this to change the theme
		*/
		--base-h: var(--brand-lavendar-h);

		/*
		* Default theme
		* - shades of the key hue
		*/
		--color-primary: oklch(38% 0.008 var(--base-h));
		--color-secondary: oklch(47% 0.07 var(--base-h));
		--color-highlight: oklch(71% 0.11 var(--base-h));
		--color-island: oklch(100% 0 var(--base-h));
		--color-surface: oklch(98% 0.005 var(--base-h));
		--color-well: oklch(95% 0.007 var(--base-h));
		--color-border: oklch(80% 0.03 var(--base-h));
		--color-shadow: oklch(42% 0.07 var(--base-h) / 0.2);
	}

	/* Default dark theme */
	@media (prefers-color-scheme: dark) {
		.theme {
			--color-primary: oklch(98% 0.002 var(--base-h));
			--color-secondary: oklch(85% 0.05 var(--base-h));
			--color-highlight: oklch(71% 0.12 var(--base-h));
			--color-island: oklch(41% 0.01 var(--base-h));
			--color-surface: oklch(36% 0.01 var(--base-h));
			--color-well: oklch(31% 0.008 var(--base-h));
			--color-border: oklch(8% 0.06 var(--base-h));
			--color-shadow: oklch(5% 0.06 var(--base-h) / 0.2);
		}
	}
</style>
