---
// --- assetsincrementsidenotes,
import '@styles/tokens/type.css';
import '@styles/utilities/type.css';

// --- utils
import { sentenceCase } from '@lib/stringHelpers';
import * as sidenotes from '@lib/model/sidenotes';

// --- components
import RenderedText from '@components/elements/RenderedText.astro';

// --- types
import type { TypeScale, FormattedText } from '@lib/types';

export interface Props {
	text: FormattedText;
	class?: string;
	typeFace?: 'body' | 'display' | 'accent';
	typeSize?: TypeScale;
	wrap?: 'none' | 'pretty' | 'balance';
}

// --- props and state
const {
	text,
	class: className = '',
	typeSize = 'epsilon',
	typeFace = 'body',
	wrap = 'pretty',
} = Astro.props as Props;


const classList = [
	'passage',
	typeFace !== 'body' ? `type-role-${typeFace}` : '',
	`type-scale-${typeSize}`,
	wrap !== 'none' ? wrap : '',
	className,
].join(' ');

// --- functions
// render special elements from Prismic text
function htmlSerializer(type, element, content, children): string {

	// custom labels
	if (element.data) {
		const { label } = element.data;

		if (label === 'note') {
			// remove the fallback parentheses around the label text
			// -> https://stackoverflow.com/questions/19134860/javascript-remove-strings-in-beginning-and-end#19135220
			let note = children.toString().trim().replace(/(^\(|\)$)/mg, '');

			// add a period at the end of the note text, if there isn't one.
			if (note.slice(-1) !== '.') note = note.concat('.');

			// add to sidenote count model so each gets a unique number
			sidenotes.increment();

			return `
				<jp-sidenote
					id="sidenote-${sidenotes.getCount()}"
					number="${sidenotes.getCount()}"
				>
					<span class="fallback">(Note: </span>${sentenceCase(note)}<span class="fallback">)</span>
				</jp-sidenote>
			`;
		}

		if (label === 'inline code') return `<code>${children.toString()}</code>`;
	}

	return null;
}
---

<script src="@scripts/SideNoteMarkdown.js"></script>

<div class={classList}>
	<slot>
		<RenderedText
			{htmlSerializer}
			{...text}
		/>
	</slot>
</div>

<style>
	.passage {
		overflow: visible;
		position: relative;
	}

	.balance {
		text-wrap: balance;
	}

	.pretty {
		text-wrap: pretty;
	}

	.passage > :global(*) {
		line-height: var(--type-leading-default);
	}

  .passage > :global(* + *) {
    margin-block-start: 1em;
  }

	.passage :global(li + li) {
		margin-block-start: 1em;
	}

	/* add an icon after external links */
	@supports (mask: url('/assets/icons/external-link.svg') no-repeat 50% 50%) {
		/* display an 'external link' icon on any anchor with an absolute url */
		/* -> except for full urls pointing to my own domain (jayperry.works, jayperryworks.com) */
		.passage :global(a[href^='http']:not([href*='jayperry'])::after) {
			--size: 0.6em;

			background-color: currentColor;
			content: '';
			display: inline-block;
			height: var(--size);
			line-height: var(--type-leading-default);
			margin: 0 0.1em 0 0.25em;
			mask: url('/assets/icons/external-link.svg') no-repeat 50% 50%;
			position: relative;
			vertical-align: baseline;
			width: var(--size);
		}
	}
</style>
