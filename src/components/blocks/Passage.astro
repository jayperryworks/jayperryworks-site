---
/**
 * Passage block component
 * - display formatted, flowing body text
 *
 * @param {FormattedText} text - text content
 * @param {string} [class] - classes to append to the container
 * @param {boolean} [footnotes] - uses footnotes
 * @param {'body' | 'display' | 'accent'} [typeFace] - type role for the text
 * @param {TypeScale} [typeSize] - size of the text
 * @param {'none' | 'pretty' | 'balance'} [wrap] - how to handle line wraps
 * @param {boolean} [allowHTML=false] - render embedded html in markdown
 */

// --- assets ---
import '@styles/tokens/type.css';
import '@styles/utilities/type.css';

// --- utils ---
import { sentenceCase } from '@lib/stringHelpers';
import * as sidenotes from '@lib/model/sidenotes';

// --- components ---
import RenderedText from '@components/elements/RenderedText.astro';

// --- types ---
import type { TypeScale, FormattedText } from '@lib/types';

// --- props and state ---
const {
	text,
	allowHTML: html = false,
	class: className = '',
	footnotes = true,
	typeFace = 'body',
	typeSize = 'epsilon',
	wrap = 'pretty',
} = Astro.props;

const classList = [
	'passage',
	typeFace !== 'body' ? `type-role-${typeFace}` : '',
	`type-scale-${typeSize}`,
	wrap !== 'none' ? wrap : '',
	className,
].join(' ');

// --- functions ---
// render special elements from Prismic text
function htmlSerializer(type, element, content, children): string {
	// custom labels
	if (element.data) {
		const { label } = element.data;

		if (label === 'note' && footnotes) {
			// remove the fallback parentheses around the label text
			// -> https://stackoverflow.com/questions/19134860/javascript-remove-strings-in-beginning-and-end#19135220
			let note = children
				.toString()
				.trim()
				.replace(/(^\(|\)$)/gm, '');

			// add a period at the end of the note text, if there isn't one.
			if (note.slice(-1) !== '.') note = note.concat('.');

			// add to sidenote count model so each gets a unique number
			sidenotes.increment();

			return `
				<jp-sidenote
					id="sidenote-${sidenotes.getCount()}"
					number="${sidenotes.getCount()}"
				>
					<span class="fallback">(Note: </span>${sentenceCase(note)}<span class="fallback">)</span>
				</jp-sidenote>
			`;
		}

		if (label === 'inline code') return `<code>${children.toString()}</code>`;
	}

	return null;
}
---

<div class={classList}>
	<slot>
		<RenderedText
			{htmlSerializer}
			{...text}
			{footnotes}
			{html}
		/>
	</slot>
</div>

<!-- Transitioning to markdown-rendered sidenotes instead of Prismic Rich Text. TODO: phase out the SideNote component. -->
<script src="@scripts/SideNoteMarkdown.js"></script>
<script src="@scripts/SideNote.ts"></script>

<style>
	.passage {
		clear: both;
		overflow: hidden;
		position: relative;
	}

	/* text wrap styles */
	.balance {
		text-wrap: balance;
	}

	.pretty {
		text-wrap: pretty;
	}

	/* spacing */
	.passage > :global(*) {
		line-height: var(--type-leading-default);
		max-width: var(--content-width-default);
	}

	.passage > :global(* + *) {
		margin-block-start: 1em;
	}

	.passage :global(li + li) {
		margin-block-start: 1em;
	}

	/* add an icon after external links */
	@supports (mask: url('/assets/icons/external-link.svg') no-repeat 50% 50%) {
		/* display an 'external link' icon on any anchor with an absolute url */
		/* -> except for full urls pointing to my own domain (jayperry.works, jayperryworks.com) */
		.passage :global(a[href^='http']:not([href*='jayperry'])::after) {
			--size: 0.6em;

			background-color: currentColor;
			content: '';
			display: inline-block;
			height: var(--size);
			line-height: var(--type-leading-default);
			margin: 0 0.1em 0 0.25em;
			mask: url('/assets/icons/external-link.svg') no-repeat 50% 50%;
			position: relative;
			vertical-align: baseline;
			width: var(--size);
		}
	}

	/* Footnotes/sidenotes */
	:global([data-supports~='js']) .passage :global(sup) {
		vertical-align: baseline;
	}

	:global([data-footnote-ref]),
	:global(.sidenote-label) {
		--size: 1.6em;
		--color: var(--color-secondary);

		background-color: transparent;
		border-radius: 1000px;
		border: 2px solid var(--color);
		color: var(--color);
		cursor: pointer;
		display: inline-block;
		font-family: var(--type-font-accent);
		font-size: var(--type-scale-eta);
		line-height: var(--size);
		margin-inline: 0.35rem;
		min-height: var(--size);
		min-width: var(--size);
		padding: 0 0.45rem;
		position: relative;
		text-align: center;
		text-decoration: none;
		transform: translateY(20%); /* scoot down a little */
		transition:
			color 0.25s ease,
			border-color 0.25s ease;
		vertical-align: top;
	}

	:global(.sidenote-label):hover,
	:global(.sidenote-label):active,
	:global(.sidenote-label).is-active {
		--color: var(--color-highlight);
	}

	:global(.footnotes) {
		border-radius: var(--border-radius);
		background-color: var(--color-well);
		padding: var(--space-medium);
		display: flex;
		flex-direction: column;
		gap: var(--space-narrow);
	}

	:global(.footnotes h2) {
		font-size: var(--type-scale-delta);
	}

	:global(.footnotes ol) {
		margin: 0;
	}

	:global(.footnotes p),
	:global(.footnotes ol) {
		font-size: var(--type-scale-zeta);
	}

	:global([data-supports~='js'] [data-footnotes]) {
		display: none;
	}
</style>
