---
// --- assetsincrementsidenotes,
import '@styles/tokens/type.css';
import '@styles/utilities/type.css';

// --- utils
import { sentenceCase } from '@lib/stringHelpers';
import * as sidenotes from '@lib/model/sidenotes';

// --- components
import RenderedText from '@components/elements/RenderedText.astro';

// --- types
import type { TypeScale, FormattedText } from '@lib/types';

export interface Props {
	text: FormattedText;
	class?: string;
	typeFace?: 'body' | 'display' | 'accent';
	typeSize?: TypeScale;
}

// --- props and state
const {
	text,
	class: className = '',
	typeSize = 'epsilon',
	typeFace = 'body',
} = Astro.props as Props;


const classList = [
	'prose',
	typeFace !== 'body' ? `type-role-${typeFace}` : '',
	`type-scale-${typeSize}`,
	className
].join(' ');

// --- functions
// render special elements from Prismic text
function htmlSerializer(type, element, content, children): string {

	// custom labels
	if (element.data) {
		const { label } = element.data;

		if (label === 'note') {
			// remove the fallback parentheses around the label text.
			let note = children.toString().replace('(', '').replace(')', '').trim();

			// add a period at the end of the note text, if there isn't one.
			if (note.slice(-1) !== '.') note = note.concat('.');

			// add to sidenote count model so each gets a unique number
			sidenotes.increment();

			return `
				<span class="sidenote">
					<input
						aria-label="Show the sidenote"
						class="sidenote-input"
						id="sidenote-input-${sidenotes.getCount()}"
						type="checkbox"
					>
						<label
							aria-describedby="${sidenotes.getCount()}"
							class="sidenote-label"
							for="sidenote-input-${sidenotes.getCount()}"
							tabindex="0"
						>${sidenotes.getCount()}</label>
					</input>
					<small
						class="sidenote-content ${sidenotes.getCount() % 2 === 0 ? 'left' : 'right'}"
						id="${sidenotes.getCount()}"
					>
						<span class="sidenote-parenthesis">(Note: </span>
						<span class="sidenote-text type-scale-zeta">${sentenceCase(note)}</span>
						<span class="sidenote-parenthesis">)</span>
					</small>
				</span>
			`;
		}

		if (label === 'inline code') return `<code>${children.toString()}</code>`;
	}

	return null;
}
---

<div class={classList}>
	<slot>
		<RenderedText
			allowHTML={true}
			{htmlSerializer}
			{...text}
		/>
	</slot>
</div>

<style>
	.prose {
		overflow: visible;
		position: relative;
	}

	.prose > :global(*) {
		line-height: var(--type-leading-default);
	}

  .prose > :global(* + *) {
    margin-block-start: 1em;
  }

	.prose :global(li + li) {
		margin-block-start: 1em;
	}

	/* add an icon after external links */
	@supports (mask: url('/assets/icons/external-link.svg') no-repeat 50% 50%) {
		/* display an 'external link' icon on any anchor with an absolute url */
		/* -> except for full urls pointing to my own domain (jayperry.works, jayperryworks.com) */
		.prose :global(a[href^='http']:not([href*='jayperry'])::after) {
			--size: 0.6em;

			background-color: currentColor;
			content: '';
			display: inline-block;
			height: var(--size);
			line-height: var(--type-leading-default);
			margin: 0 0.1em 0 0.25em;
			mask: url('/assets/icons/external-link.svg') no-repeat 50% 50%;
			position: relative;
			vertical-align: baseline;
			width: var(--size);
		}
	}

	/* sidenotes */
	/* -> Based on Koos Looijesteijn's excellent 'Semantic sidenotes' */
	/* -> https://www.kooslooijesteijn.net/blog/sidenotes-without-js */
	/* -> https://github.com/kslstn/sidenotes/blob/main/style.css */
	/* -> I've opted to keep notes as pop-outs at all screen sizes, rather than move to the side.
				This is because my layout width varies with page blocks (text, images, pullquotes, etc.) and sidenotes may collide with other blocks. */
	.prose :global(.sidenote) {
		--label-color: var(--color-primary);
		display: inline;
	}

	.prose :global(.sidenote-input) {
		display: none;
	}

	.prose :global(.sidenote-label) {
		border-radius: 1000px;
		border: 2px solid var(--label-color);
		color: var(--label-color);
		cursor: pointer;
		display: inline-block;
		font-family: var(--type-font-accent);
		font-size: 0.6em;
		line-height: inherit;
		margin-inline: 0.25em;
		min-height: 2em;
		min-width: 2em;
		padding-inline: 0.5rem;
		position: relative;
		text-align: center;
		transition: color 0.25s ease, border-color 0.25s ease;
		vertical-align: top;
	}

	.prose :global(.sidenote-label:hover),
	.prose :global(.sidenote-input:checked ~ .sidenote-label) {
		--label-color: var(--color-highlight);
	}

	.prose :global(.sidenote-content),
	.prose :global(.sidenote-parenthesis) {
		position: absolute;
		left: -999999px;
		top: auto;
	}

	.prose :global(.sidenote-content) {
		align-items: flex-start;
		border-radius: 0.2em;
		display: flex;
		font-family: var(--type-font-accent);
		gap: var(--space-xnarrow);
	}

	.prose :global(.sidenote-content::before) {
		color: var(--color-highlight);
		content: attr(id) ".";
	}

	.prose :global(.sidenote-input:checked ~ .sidenote-content) {
		background-color: var(--color-well);
		float: left;
		left: auto;
		margin-block: var(--space-narrow);
		min-width: 100%;
		overflow: hidden;
		padding: var(--space-narrow);
		position: relative;
	}

	.prose :global(.sidenote-text) {
		flex: 1;
	}
</style>
