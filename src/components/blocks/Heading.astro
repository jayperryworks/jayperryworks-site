---
/**
 * Headling block component
 * - render a heading tag with the correct markup and classes
 *
 * @param {'left' | 'center' | 'right'} [align='left'] - align the text
 * @param {string} [class] - classes to append to the container
 * @param {string} [id] - ID attribute
 * @param {number} [level=2] - the level of the heading tag
 * @param {boolean} [subheading] - is this a subheading?
 * 	- If so, render as a 'p' tag and style the text differently
 * @param {TitleField} [text] - the title text, can also pass in the slot
 */

// --- assets ---
import '@styles/utilities/type.css';
import '@styles/utilities/spacing.css';

// --- helpers ----
import * as prismicHelpers from '@prismicio/helpers';

// --- types ---
import type { TitleField } from '@prismicio/types';
import type { ContentWidth } from '@lib/types';

// --- props ---
const {
	align = 'left',
	class: className = '',
	id,
	level = 2,
	subheading,
	text,
} = Astro.props;

const levels = [
	'alpha',
	'beta',
	'gamma',
	'delta',
	'epsilon',
	'zeta',
];

const El = !subheading ? `h${level}` : 'p';

const classList = [
	'heading',
	subheading ? `sub type-role-accent type-scale-${levels[level - 1]}` : '',
	align !== 'left' ? `align-${align}` : '',
	className,
].join(' ');
---

<El class={classList} id={id}>
	<slot>{text && prismicHelpers.asText(text)}</slot>
</El>

<style>
	.heading {
		margin-block: 0;
		text-wrap: balance;
	}

	.sub {
		color: var(--color-secondary);
		max-width: none; /* override the default max width for paragraphs */
	}

	.align-center {
		text-align: center;
	}

	.align-right {
		text-align: right;
	}
</style>
