---
/**
 * @typedef {Object} ImageGalleryItem - image objects for each grid item
 * @property {ImageField} image - default image field
 * @property {ImageField} darkModeImage - a dark-mode version of the image
 */

/**
 * Image gallery block component
 * - Display similar images in a fluid grid layout
 *
 * @param {ImageGalleryItem[]} images - array of image objects (Prismic data)
 * @param {FormattedText} [attribution] - credit for the artist/photographer
 * @param {boolean} [border] - dislay a border around each image
 * @param {string} [caption] - a caption displayed below the grid
 * @param {string} [class] - classes to append to the container
 * @param {'small' | 'medium' | 'large'} [columnSize='medium'] - how wide the columns are
 * @param {ImageFit} [fitImages='default'] - object-fit styles for each image
 * @param {Frame} [frame='None'] - a frame or device for all images
 * @param {SpaceScale} [gutter='xnarrow'] - how much space between items
 * @param {boolean} [useImageAspectRatio] - use the images' own aspect ratios for their frames
 */

// --- components ---
import Figure from '@components/blocks/Figure.astro';
import Gallery from '@components/layout/Gallery.astro';
import ImageFrame from '@components/elements/ImageFrame.astro';
import RevealOnScroll from '@components/layout/RevealOnScroll.astro';

// --- types ---
import type { ImageField } from '@prismicio/types';
import type {
	ContentWidth,
	FormattedText,
	Frame,
	ImageFit,
	SpaceScale,
} from '@lib/types';

// --- props ---
const {
	images,
	attribution,
	border = false,
	caption,
	class: className = '',
	columnSize = 'medium',
	fitImages = 'default',
	frame = 'None',
	gutter = 'xnarrow',
	useImageAspectRatio = false,
} = Astro.props;
---

<Figure
	caption={caption && { markdown: caption }}
	class={[
		'image-gallery',
		className,
	].join(' ')}
	{attribution}
>
	<Gallery
		size={columnSize}
		{gutter}
	>
		{images.map(({ image, darkModeImage }) => (
			<RevealOnScroll tag="li">
				<ImageFrame
					source={image}
					darkModeSource={darkModeImage}
					fit={fitImages}
					{border}
					{frame}
					{useImageAspectRatio}
				/>
			</RevealOnScroll>
		))}
	</Gallery>
</Figure>

<style is:global>
	.image-gallery li {
		text-align: center;
		font-size: 0;
	}

	.image-gallery li > :global(img) {
		display: block;
	}
</style>
